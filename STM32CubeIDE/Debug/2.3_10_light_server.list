
2.3_10_light_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005c00  08005c00  00005c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e8  08005d0c  08005d0c  00005d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800b2f4  0800b2f4  0000b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b564  0800b564  00010074  2**0
                  CONTENTS
  4 .ARM          00000000  0800b564  0800b564  00010074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b564  0800b564  00010074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b564  0800b564  0000b564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b568  0800b568  0000b568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b56c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000078  0800b5e0  00010078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  0800b5e0  000101f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010594  00000000  00000000  0001009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a48  00000000  00000000  00020631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00023080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00024038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019941  00000000  00000000  00024ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b45  00000000  00000000  0003e829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b56  00000000  00000000  0004f36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  000e0f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005d0c <__do_global_dtors_aux>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	4c05      	ldr	r4, [pc, #20]	; (8005d24 <__do_global_dtors_aux+0x18>)
 8005d10:	7823      	ldrb	r3, [r4, #0]
 8005d12:	b933      	cbnz	r3, 8005d22 <__do_global_dtors_aux+0x16>
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <__do_global_dtors_aux+0x1c>)
 8005d16:	b113      	cbz	r3, 8005d1e <__do_global_dtors_aux+0x12>
 8005d18:	4804      	ldr	r0, [pc, #16]	; (8005d2c <__do_global_dtors_aux+0x20>)
 8005d1a:	f3af 8000 	nop.w
 8005d1e:	2301      	movs	r3, #1
 8005d20:	7023      	strb	r3, [r4, #0]
 8005d22:	bd10      	pop	{r4, pc}
 8005d24:	20000078 	.word	0x20000078
 8005d28:	00000000 	.word	0x00000000
 8005d2c:	0800b2dc 	.word	0x0800b2dc

08005d30 <frame_dummy>:
 8005d30:	b508      	push	{r3, lr}
 8005d32:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <frame_dummy+0x10>)
 8005d34:	b11b      	cbz	r3, 8005d3e <frame_dummy+0xe>
 8005d36:	4903      	ldr	r1, [pc, #12]	; (8005d44 <frame_dummy+0x14>)
 8005d38:	4803      	ldr	r0, [pc, #12]	; (8005d48 <frame_dummy+0x18>)
 8005d3a:	f3af 8000 	nop.w
 8005d3e:	bd08      	pop	{r3, pc}
 8005d40:	00000000 	.word	0x00000000
 8005d44:	2000007c 	.word	0x2000007c
 8005d48:	0800b2dc 	.word	0x0800b2dc

08005d4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005d58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005d64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005d68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005d6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005d74:	e000      	b.n	8005d78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005d76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005d78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f9      	beq.n	8005d76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005d82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005d8c:	687b      	ldr	r3, [r7, #4]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <dataCreate>:
#define CURR_LIGHT_LEVEL 0x11
#define ON_LIGHT_LEVEL 0x12
#define OFF_LIGHT_LEVEL 0x13
#define CURR_LED_STATE 0x14

uint8_t dataCreate(char* buf, uint8_t dataType, uint8_t data2send) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
 8005da4:	4613      	mov	r3, r2
 8005da6:	70bb      	strb	r3, [r7, #2]
  *(buf+1) = dataType;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3301      	adds	r3, #1
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	701a      	strb	r2, [r3, #0]
  if (dataType >> 4) {
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d011      	beq.n	8005dde <dataCreate+0x46>
    *(buf) = 2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	701a      	strb	r2, [r3, #0]
    *(buf+2) = data2send;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	78ba      	ldrb	r2, [r7, #2]
 8005dc6:	701a      	strb	r2, [r3, #0]
    *(buf+3) = (2 + dataType + data2send);
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	78bb      	ldrb	r3, [r7, #2]
 8005dcc:	4413      	add	r3, r2
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3303      	adds	r3, #3
 8005dd4:	3202      	adds	r2, #2
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
    return 4;
 8005dda:	2304      	movs	r3, #4
 8005ddc:	e009      	b.n	8005df2 <dataCreate+0x5a>
  } else {
    *(buf) = 1;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
    *(buf+2) = (1 + dataType);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3302      	adds	r3, #2
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	3201      	adds	r2, #1
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]
    return 3;
 8005df0:	2303      	movs	r3, #3
  }
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <dataDecrypt>:

uint8_t dataDecrypt(char* buf) {
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint16_t dataSum = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	81fb      	strh	r3, [r7, #14]
  uint8_t i;
  for (i = 0; i <= buf[0]; i++) {
 8005e08:	2300      	movs	r3, #0
 8005e0a:	737b      	strb	r3, [r7, #13]
 8005e0c:	e00a      	b.n	8005e24 <dataDecrypt+0x28>
    dataSum += buf[i];
 8005e0e:	7b7b      	ldrb	r3, [r7, #13]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i <= buf[0]; i++) {
 8005e1e:	7b7b      	ldrb	r3, [r7, #13]
 8005e20:	3301      	adds	r3, #1
 8005e22:	737b      	strb	r3, [r7, #13]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	7b7a      	ldrb	r2, [r7, #13]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d9ef      	bls.n	8005e0e <dataDecrypt+0x12>
  }
  if (dataSum == buf[i]) {
 8005e2e:	7b7b      	ldrb	r3, [r7, #13]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	89fa      	ldrh	r2, [r7, #14]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d103      	bne.n	8005e46 <dataDecrypt+0x4a>
    return buf[1];
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3301      	adds	r3, #1
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	e000      	b.n	8005e48 <dataDecrypt+0x4c>
  } else return DATA_ERROR;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr
	...

08005e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e58:	b672      	cpsid	i
}
 8005e5a:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = FIRMWARE_START_ADDRESS;
 8005e5c:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <main+0x5c>)
 8005e5e:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <main+0x60>)
 8005e60:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8005e62:	b662      	cpsie	i
}
 8005e64:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e66:	f000 fe45 	bl	8006af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e6a:	f000 f831 	bl	8005ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e6e:	f000 f9b5 	bl	80061dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8005e72:	f000 f883 	bl	8005f7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8005e76:	f000 f8bf 	bl	8005ff8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8005e7a:	f000 f95b 	bl	8006134 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8005e7e:	f000 f983 	bl	8006188 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("rcc->csr = %lu\n", RCC->CSR);
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <main+0x64>)
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	4619      	mov	r1, r3
 8005e88:	480c      	ldr	r0, [pc, #48]	; (8005ebc <main+0x68>)
 8005e8a:	f004 fa51 	bl	800a330 <iprintf>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8005e8e:	480c      	ldr	r0, [pc, #48]	; (8005ec0 <main+0x6c>)
 8005e90:	f001 faaa 	bl	80073e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8005e94:	480a      	ldr	r0, [pc, #40]	; (8005ec0 <main+0x6c>)
 8005e96:	f000 ff85 	bl	8006da4 <HAL_ADC_Start_IT>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4809      	ldr	r0, [pc, #36]	; (8005ec4 <main+0x70>)
 8005e9e:	f002 ff2b 	bl	8008cf8 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, value, 1);
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4908      	ldr	r1, [pc, #32]	; (8005ec8 <main+0x74>)
 8005ea6:	4809      	ldr	r0, [pc, #36]	; (8005ecc <main+0x78>)
 8005ea8:	f003 fdb8 	bl	8009a1c <HAL_UART_Receive_IT>
  while (1)
 8005eac:	e7fe      	b.n	8005eac <main+0x58>
 8005eae:	bf00      	nop
 8005eb0:	e000ed00 	.word	0xe000ed00
 8005eb4:	08005c00 	.word	0x08005c00
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	0800b2f4 	.word	0x0800b2f4
 8005ec0:	200000a8 	.word	0x200000a8
 8005ec4:	20000120 	.word	0x20000120
 8005ec8:	200001b0 	.word	0x200001b0
 8005ecc:	200000d8 	.word	0x200000d8

08005ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b094      	sub	sp, #80	; 0x50
 8005ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eda:	2228      	movs	r2, #40	; 0x28
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f004 fa1e 	bl	800a320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	609a      	str	r2, [r3, #8]
 8005efe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005f00:	2302      	movs	r3, #2
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f04:	2301      	movs	r3, #1
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f08:	2310      	movs	r3, #16
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8005f10:	2300      	movs	r3, #0
 8005f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8005f14:	2300      	movs	r3, #0
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f002 f8af 	bl	8008080 <HAL_RCC_OscConfig>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8005f28:	f000 fbd6 	bl	80066d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f2c:	230f      	movs	r3, #15
 8005f2e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f30:	2302      	movs	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f3c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005f42:	f107 0314 	add.w	r3, r7, #20
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 fb19 	bl	8008580 <HAL_RCC_ClockConfig>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005f54:	f000 fbc0 	bl	80066d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f002 fca6 	bl	80088b4 <HAL_RCCEx_PeriphCLKConfig>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005f6e:	f000 fbb3 	bl	80066d8 <Error_Handler>
  }
}
 8005f72:	bf00      	nop
 8005f74:	3750      	adds	r7, #80	; 0x50
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8005f8c:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005f8e:	4a19      	ldr	r2, [pc, #100]	; (8005ff4 <MX_ADC1_Init+0x78>)
 8005f90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005f92:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f9e:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8005fa4:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005fb6:	480e      	ldr	r0, [pc, #56]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fb8:	f000 fe1c 	bl	8006bf4 <HAL_ADC_Init>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8005fc2:	f000 fb89 	bl	80066d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4806      	ldr	r0, [pc, #24]	; (8005ff0 <MX_ADC1_Init+0x74>)
 8005fd8:	f001 f872 	bl	80070c0 <HAL_ADC_ConfigChannel>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8005fe2:	f000 fb79 	bl	80066d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200000a8 	.word	0x200000a8
 8005ff4:	40012400 	.word	0x40012400

08005ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b096      	sub	sp, #88	; 0x58
 8005ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800600c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	609a      	str	r2, [r3, #8]
 8006022:	60da      	str	r2, [r3, #12]
 8006024:	611a      	str	r2, [r3, #16]
 8006026:	615a      	str	r2, [r3, #20]
 8006028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	2220      	movs	r2, #32
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f004 f975 	bl	800a320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006036:	4b3d      	ldr	r3, [pc, #244]	; (800612c <MX_TIM1_Init+0x134>)
 8006038:	4a3d      	ldr	r2, [pc, #244]	; (8006130 <MX_TIM1_Init+0x138>)
 800603a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <MX_TIM1_Init+0x134>)
 800603e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006044:	4b39      	ldr	r3, [pc, #228]	; (800612c <MX_TIM1_Init+0x134>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 800604a:	4b38      	ldr	r3, [pc, #224]	; (800612c <MX_TIM1_Init+0x134>)
 800604c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006052:	4b36      	ldr	r3, [pc, #216]	; (800612c <MX_TIM1_Init+0x134>)
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006058:	4b34      	ldr	r3, [pc, #208]	; (800612c <MX_TIM1_Init+0x134>)
 800605a:	2200      	movs	r2, #0
 800605c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800605e:	4b33      	ldr	r3, [pc, #204]	; (800612c <MX_TIM1_Init+0x134>)
 8006060:	2200      	movs	r2, #0
 8006062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006064:	4831      	ldr	r0, [pc, #196]	; (800612c <MX_TIM1_Init+0x134>)
 8006066:	f002 fd9f 	bl	8008ba8 <HAL_TIM_Base_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006070:	f000 fb32 	bl	80066d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006078:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800607a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800607e:	4619      	mov	r1, r3
 8006080:	482a      	ldr	r0, [pc, #168]	; (800612c <MX_TIM1_Init+0x134>)
 8006082:	f002 ff33 	bl	8008eec <HAL_TIM_ConfigClockSource>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800608c:	f000 fb24 	bl	80066d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006090:	4826      	ldr	r0, [pc, #152]	; (800612c <MX_TIM1_Init+0x134>)
 8006092:	f002 fdd8 	bl	8008c46 <HAL_TIM_OC_Init>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800609c:	f000 fb1c 	bl	80066d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060a0:	2300      	movs	r3, #0
 80060a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80060a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80060ac:	4619      	mov	r1, r3
 80060ae:	481f      	ldr	r0, [pc, #124]	; (800612c <MX_TIM1_Init+0x134>)
 80060b0:	f003 fa84 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80060ba:	f000 fb0d 	bl	80066d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060c6:	2300      	movs	r3, #0
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80060ca:	2300      	movs	r3, #0
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80060d2:	2300      	movs	r3, #0
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80060d6:	2300      	movs	r3, #0
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80060da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060de:	2200      	movs	r2, #0
 80060e0:	4619      	mov	r1, r3
 80060e2:	4812      	ldr	r0, [pc, #72]	; (800612c <MX_TIM1_Init+0x134>)
 80060e4:	f002 feaa 	bl	8008e3c <HAL_TIM_OC_ConfigChannel>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80060ee:	f000 faf3 	bl	80066d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800610a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800610c:	2300      	movs	r3, #0
 800610e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	4619      	mov	r1, r3
 8006114:	4805      	ldr	r0, [pc, #20]	; (800612c <MX_TIM1_Init+0x134>)
 8006116:	f003 faaf 	bl	8009678 <HAL_TIMEx_ConfigBreakDeadTime>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8006120:	f000 fada 	bl	80066d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006124:	bf00      	nop
 8006126:	3758      	adds	r7, #88	; 0x58
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000120 	.word	0x20000120
 8006130:	40012c00 	.word	0x40012c00

08006134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800613a:	4a12      	ldr	r2, [pc, #72]	; (8006184 <MX_USART1_UART_Init+0x50>)
 800613c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006140:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006148:	2200      	movs	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800614e:	2200      	movs	r2, #0
 8006150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006158:	4b09      	ldr	r3, [pc, #36]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800615a:	220c      	movs	r2, #12
 800615c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006160:	2200      	movs	r2, #0
 8006162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 8006166:	2200      	movs	r2, #0
 8006168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800616a:	4805      	ldr	r0, [pc, #20]	; (8006180 <MX_USART1_UART_Init+0x4c>)
 800616c:	f003 fad5 	bl	800971a <HAL_UART_Init>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006176:	f000 faaf 	bl	80066d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200000d8 	.word	0x200000d8
 8006184:	40013800 	.word	0x40013800

08006188 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 800618e:	4a12      	ldr	r2, [pc, #72]	; (80061d8 <MX_USART2_UART_Init+0x50>)
 8006190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006192:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 8006194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800619a:	4b0e      	ldr	r3, [pc, #56]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061ae:	220c      	movs	r2, #12
 80061b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061b2:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061be:	4805      	ldr	r0, [pc, #20]	; (80061d4 <MX_USART2_UART_Init+0x4c>)
 80061c0:	f003 faab 	bl	800971a <HAL_UART_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80061ca:	f000 fa85 	bl	80066d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000168 	.word	0x20000168
 80061d8:	40004400 	.word	0x40004400

080061dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	609a      	str	r2, [r3, #8]
 80061ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f0:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <MX_GPIO_Init+0xf8>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4a37      	ldr	r2, [pc, #220]	; (80062d4 <MX_GPIO_Init+0xf8>)
 80061f6:	f043 0310 	orr.w	r3, r3, #16
 80061fa:	6193      	str	r3, [r2, #24]
 80061fc:	4b35      	ldr	r3, [pc, #212]	; (80062d4 <MX_GPIO_Init+0xf8>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006208:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <MX_GPIO_Init+0xf8>)
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	4a31      	ldr	r2, [pc, #196]	; (80062d4 <MX_GPIO_Init+0xf8>)
 800620e:	f043 0320 	orr.w	r3, r3, #32
 8006212:	6193      	str	r3, [r2, #24]
 8006214:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <MX_GPIO_Init+0xf8>)
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <MX_GPIO_Init+0xf8>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	4a2b      	ldr	r2, [pc, #172]	; (80062d4 <MX_GPIO_Init+0xf8>)
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	6193      	str	r3, [r2, #24]
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <MX_GPIO_Init+0xf8>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006238:	4b26      	ldr	r3, [pc, #152]	; (80062d4 <MX_GPIO_Init+0xf8>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	4a25      	ldr	r2, [pc, #148]	; (80062d4 <MX_GPIO_Init+0xf8>)
 800623e:	f043 0308 	orr.w	r3, r3, #8
 8006242:	6193      	str	r3, [r2, #24]
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <MX_GPIO_Init+0xf8>)
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	603b      	str	r3, [r7, #0]
 800624e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006250:	2200      	movs	r2, #0
 8006252:	2120      	movs	r1, #32
 8006254:	4820      	ldr	r0, [pc, #128]	; (80062d8 <MX_GPIO_Init+0xfc>)
 8006256:	f001 fed9 	bl	800800c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800625a:	2200      	movs	r2, #0
 800625c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006260:	481e      	ldr	r0, [pc, #120]	; (80062dc <MX_GPIO_Init+0x100>)
 8006262:	f001 fed3 	bl	800800c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800626a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <MX_GPIO_Init+0x104>)
 800626e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006274:	f107 0310 	add.w	r3, r7, #16
 8006278:	4619      	mov	r1, r3
 800627a:	481a      	ldr	r0, [pc, #104]	; (80062e4 <MX_GPIO_Init+0x108>)
 800627c:	f001 fd42 	bl	8007d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8006280:	2320      	movs	r3, #32
 8006282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006288:	2300      	movs	r3, #0
 800628a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628c:	2302      	movs	r3, #2
 800628e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4619      	mov	r1, r3
 8006296:	4810      	ldr	r0, [pc, #64]	; (80062d8 <MX_GPIO_Init+0xfc>)
 8006298:	f001 fd34 	bl	8007d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062aa:	2302      	movs	r3, #2
 80062ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ae:	f107 0310 	add.w	r3, r7, #16
 80062b2:	4619      	mov	r1, r3
 80062b4:	4809      	ldr	r0, [pc, #36]	; (80062dc <MX_GPIO_Init+0x100>)
 80062b6:	f001 fd25 	bl	8007d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80062ba:	2200      	movs	r2, #0
 80062bc:	2100      	movs	r1, #0
 80062be:	2028      	movs	r0, #40	; 0x28
 80062c0:	f001 fa35 	bl	800772e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80062c4:	2028      	movs	r0, #40	; 0x28
 80062c6:	f001 fa4e 	bl	8007766 <HAL_NVIC_EnableIRQ>

}
 80062ca:	bf00      	nop
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40010800 	.word	0x40010800
 80062dc:	40010c00 	.word	0x40010c00
 80062e0:	10110000 	.word	0x10110000
 80062e4:	40011000 	.word	0x40011000

080062e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
	if (++counter == 65535) counter = 0;
 80062f0:	4baa      	ldr	r3, [pc, #680]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	4ba8      	ldr	r3, [pc, #672]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	4ba7      	ldr	r3, [pc, #668]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006304:	4293      	cmp	r3, r2
 8006306:	d102      	bne.n	800630e <HAL_UART_RxCpltCallback+0x26>
 8006308:	4ba4      	ldr	r3, [pc, #656]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 800630a:	2200      	movs	r2, #0
 800630c:	801a      	strh	r2, [r3, #0]
	printf("HAL_UART_RxCpltCallback c=%u", counter);
 800630e:	4ba3      	ldr	r3, [pc, #652]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	48a2      	ldr	r0, [pc, #648]	; (80065a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8006316:	f004 f80b 	bl	800a330 <iprintf>
	if (value[0]) {
 800631a:	4ba2      	ldr	r3, [pc, #648]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 8137 	beq.w	8006592 <HAL_UART_RxCpltCallback+0x2aa>
		if (HAL_UART_Receive(&huart1, (value+1), (value[0]+1), 500) == HAL_OK) {
 8006324:	49a0      	ldr	r1, [pc, #640]	; (80065a8 <HAL_UART_RxCpltCallback+0x2c0>)
 8006326:	4b9f      	ldr	r3, [pc, #636]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	3301      	adds	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006334:	489d      	ldr	r0, [pc, #628]	; (80065ac <HAL_UART_RxCpltCallback+0x2c4>)
 8006336:	f003 facf 	bl	80098d8 <HAL_UART_Receive>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 8117 	bne.w	8006570 <HAL_UART_RxCpltCallback+0x288>
			printf("0 = %d; 1 = %d; 2 = %d; c = %d;\n", value[0], value[1], value[2], counter);
 8006342:	4b98      	ldr	r3, [pc, #608]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	4619      	mov	r1, r3
 8006348:	4b96      	ldr	r3, [pc, #600]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	461a      	mov	r2, r3
 800634e:	4b95      	ldr	r3, [pc, #596]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006350:	789b      	ldrb	r3, [r3, #2]
 8006352:	4618      	mov	r0, r3
 8006354:	4b91      	ldr	r3, [pc, #580]	; (800659c <HAL_UART_RxCpltCallback+0x2b4>)
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4603      	mov	r3, r0
 800635c:	4894      	ldr	r0, [pc, #592]	; (80065b0 <HAL_UART_RxCpltCallback+0x2c8>)
 800635e:	f003 ffe7 	bl	800a330 <iprintf>
			dataSense = dataDecrypt((char*)value);
 8006362:	4890      	ldr	r0, [pc, #576]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006364:	f7ff fd4a 	bl	8005dfc <dataDecrypt>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	4b91      	ldr	r3, [pc, #580]	; (80065b4 <HAL_UART_RxCpltCallback+0x2cc>)
 800636e:	701a      	strb	r2, [r3, #0]
			switch (dataSense) {
 8006370:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <HAL_UART_RxCpltCallback+0x2cc>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	2b12      	cmp	r3, #18
 8006378:	f200 80e3 	bhi.w	8006542 <HAL_UART_RxCpltCallback+0x25a>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <HAL_UART_RxCpltCallback+0x9c>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063d1 	.word	0x080063d1
 8006388:	08006419 	.word	0x08006419
 800638c:	0800643d 	.word	0x0800643d
 8006390:	080063f5 	.word	0x080063f5
 8006394:	08006543 	.word	0x08006543
 8006398:	08006543 	.word	0x08006543
 800639c:	08006543 	.word	0x08006543
 80063a0:	08006543 	.word	0x08006543
 80063a4:	080064b1 	.word	0x080064b1
 80063a8:	08006543 	.word	0x08006543
 80063ac:	08006543 	.word	0x08006543
 80063b0:	08006543 	.word	0x08006543
 80063b4:	08006543 	.word	0x08006543
 80063b8:	08006543 	.word	0x08006543
 80063bc:	08006543 	.word	0x08006543
 80063c0:	08006543 	.word	0x08006543
 80063c4:	08006543 	.word	0x08006543
 80063c8:	08006461 	.word	0x08006461
 80063cc:	08006489 	.word	0x08006489
				case GET_CURR_LIGHT_LEVEL : {
					printf("\nsending CURRENT level = %d;\n", currLevel);
 80063d0:	4b79      	ldr	r3, [pc, #484]	; (80065b8 <HAL_UART_RxCpltCallback+0x2d0>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	4619      	mov	r1, r3
 80063d6:	4879      	ldr	r0, [pc, #484]	; (80065bc <HAL_UART_RxCpltCallback+0x2d4>)
 80063d8:	f003 ffaa 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, CURR_LIGHT_LEVEL, currLevel);
 80063dc:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_UART_RxCpltCallback+0x2d0>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	2111      	movs	r1, #17
 80063e4:	486f      	ldr	r0, [pc, #444]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 80063e6:	f7ff fcd7 	bl	8005d98 <dataCreate>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b74      	ldr	r3, [pc, #464]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 80063f0:	701a      	strb	r2, [r3, #0]
					break;
 80063f2:	e0b3      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case GET_LED_STATE : {
					printf("\nsending LED STATE = %d;\n", ledState);
 80063f4:	4b73      	ldr	r3, [pc, #460]	; (80065c4 <HAL_UART_RxCpltCallback+0x2dc>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4873      	ldr	r0, [pc, #460]	; (80065c8 <HAL_UART_RxCpltCallback+0x2e0>)
 80063fc:	f003 ff98 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, CURR_LED_STATE, ledState);
 8006400:	4b70      	ldr	r3, [pc, #448]	; (80065c4 <HAL_UART_RxCpltCallback+0x2dc>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	461a      	mov	r2, r3
 8006406:	2114      	movs	r1, #20
 8006408:	4866      	ldr	r0, [pc, #408]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800640a:	f7ff fcc5 	bl	8005d98 <dataCreate>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	4b6b      	ldr	r3, [pc, #428]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006414:	701a      	strb	r2, [r3, #0]
					break;
 8006416:	e0a1      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case GET_ON_LIGHT_LEVEL : {
					printf("\nsending ON level = %d;\n", onLevel);
 8006418:	4b6c      	ldr	r3, [pc, #432]	; (80065cc <HAL_UART_RxCpltCallback+0x2e4>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	4619      	mov	r1, r3
 800641e:	486c      	ldr	r0, [pc, #432]	; (80065d0 <HAL_UART_RxCpltCallback+0x2e8>)
 8006420:	f003 ff86 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, ON_LIGHT_LEVEL, onLevel);
 8006424:	4b69      	ldr	r3, [pc, #420]	; (80065cc <HAL_UART_RxCpltCallback+0x2e4>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	2112      	movs	r1, #18
 800642c:	485d      	ldr	r0, [pc, #372]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800642e:	f7ff fcb3 	bl	8005d98 <dataCreate>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006438:	701a      	strb	r2, [r3, #0]
					break;
 800643a:	e08f      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case GET_OFF_LIGHT_LEVEL : {
					printf("\nsending OFF level = %d;\n", offLevel);
 800643c:	4b65      	ldr	r3, [pc, #404]	; (80065d4 <HAL_UART_RxCpltCallback+0x2ec>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	4865      	ldr	r0, [pc, #404]	; (80065d8 <HAL_UART_RxCpltCallback+0x2f0>)
 8006444:	f003 ff74 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, OFF_LIGHT_LEVEL, offLevel);
 8006448:	4b62      	ldr	r3, [pc, #392]	; (80065d4 <HAL_UART_RxCpltCallback+0x2ec>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	2113      	movs	r1, #19
 8006450:	4854      	ldr	r0, [pc, #336]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006452:	f7ff fca1 	bl	8005d98 <dataCreate>
 8006456:	4603      	mov	r3, r0
 8006458:	461a      	mov	r2, r3
 800645a:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 800645c:	701a      	strb	r2, [r3, #0]
					break;
 800645e:	e07d      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case ON_LIGHT_LEVEL : {
					onLevel = value[2];
 8006460:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006462:	789a      	ldrb	r2, [r3, #2]
 8006464:	4b59      	ldr	r3, [pc, #356]	; (80065cc <HAL_UART_RxCpltCallback+0x2e4>)
 8006466:	701a      	strb	r2, [r3, #0]
					printf("\ngetting NEW ON level = %d;\n", onLevel);
 8006468:	4b58      	ldr	r3, [pc, #352]	; (80065cc <HAL_UART_RxCpltCallback+0x2e4>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	485b      	ldr	r0, [pc, #364]	; (80065dc <HAL_UART_RxCpltCallback+0x2f4>)
 8006470:	f003 ff5e 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, DATA_OK, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	2105      	movs	r1, #5
 8006478:	484a      	ldr	r0, [pc, #296]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800647a:	f7ff fc8d 	bl	8005d98 <dataCreate>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006484:	701a      	strb	r2, [r3, #0]
					break;
 8006486:	e069      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case OFF_LIGHT_LEVEL : {
					offLevel = value[2];
 8006488:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800648a:	789a      	ldrb	r2, [r3, #2]
 800648c:	4b51      	ldr	r3, [pc, #324]	; (80065d4 <HAL_UART_RxCpltCallback+0x2ec>)
 800648e:	701a      	strb	r2, [r3, #0]
					printf("\ngetting NEW OFF level = %d;\n", offLevel);
 8006490:	4b50      	ldr	r3, [pc, #320]	; (80065d4 <HAL_UART_RxCpltCallback+0x2ec>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	4852      	ldr	r0, [pc, #328]	; (80065e0 <HAL_UART_RxCpltCallback+0x2f8>)
 8006498:	f003 ff4a 	bl	800a330 <iprintf>
					dataLength = dataCreate((char*)value, DATA_OK, 0);
 800649c:	2200      	movs	r2, #0
 800649e:	2105      	movs	r1, #5
 80064a0:	4840      	ldr	r0, [pc, #256]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 80064a2:	f7ff fc79 	bl	8005d98 <dataCreate>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 80064ac:	701a      	strb	r2, [r3, #0]
					break;
 80064ae:	e055      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				case BOOTLOADER : {
					printf("\ngetting BOOTLOADER;\n");
 80064b0:	484c      	ldr	r0, [pc, #304]	; (80065e4 <HAL_UART_RxCpltCallback+0x2fc>)
 80064b2:	f003 ffc3 	bl	800a43c <puts>
					HAL_FLASH_Unlock();
 80064b6:	f001 fa95 	bl	80079e4 <HAL_FLASH_Unlock>
					static uint32_t PAGEError; // = 0xFFFFFFFF;
					FLASH_EraseInitTypeDef EraseInitStruct;
					EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
					EraseInitStruct.PageAddress = BOOTLOADER_FLAG_ADDRESS;
 80064be:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <HAL_UART_RxCpltCallback+0x300>)
 80064c0:	617b      	str	r3, [r7, #20]
					EraseInitStruct.NbPages = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
					if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) == HAL_OK) {
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4948      	ldr	r1, [pc, #288]	; (80065ec <HAL_UART_RxCpltCallback+0x304>)
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 fb71 	bl	8007bb4 <HAL_FLASHEx_Erase>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d125      	bne.n	8006524 <HAL_UART_RxCpltCallback+0x23c>
						uint32_t bootloaderFlag = BOOTLOADER;
 80064d8:	2309      	movs	r3, #9
 80064da:	61fb      	str	r3, [r7, #28]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, BOOTLOADER_FLAG_ADDRESS, bootloaderFlag) == HAL_OK) {
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	4940      	ldr	r1, [pc, #256]	; (80065e8 <HAL_UART_RxCpltCallback+0x300>)
 80064e6:	2002      	movs	r0, #2
 80064e8:	f001 fa0c 	bl	8007904 <HAL_FLASH_Program>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_UART_RxCpltCallback+0x222>
							HAL_FLASH_Lock();
 80064f2:	f001 fa9d 	bl	8007a30 <HAL_FLASH_Lock>
							printf("\ngoing BOOTLOADER\n");
 80064f6:	483e      	ldr	r0, [pc, #248]	; (80065f0 <HAL_UART_RxCpltCallback+0x308>)
 80064f8:	f003 ffa0 	bl	800a43c <puts>
							HAL_DeInit();
 80064fc:	f000 fb10 	bl	8006b20 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8006500:	b672      	cpsid	i
}
 8006502:	bf00      	nop
							__disable_irq();
							HAL_NVIC_SystemReset();
 8006504:	f001 f93d 	bl	8007782 <HAL_NVIC_SystemReset>
 8006508:	e018      	b.n	800653c <HAL_UART_RxCpltCallback+0x254>
						} else {
							printf("\nHAL_FLASH_Program_error\n");
 800650a:	483a      	ldr	r0, [pc, #232]	; (80065f4 <HAL_UART_RxCpltCallback+0x30c>)
 800650c:	f003 ff96 	bl	800a43c <puts>
							dataLength = dataCreate((char*)value, DATA_ERROR, 0);
 8006510:	2200      	movs	r2, #0
 8006512:	2100      	movs	r1, #0
 8006514:	4823      	ldr	r0, [pc, #140]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006516:	f7ff fc3f 	bl	8005d98 <dataCreate>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e00b      	b.n	800653c <HAL_UART_RxCpltCallback+0x254>
						}
					} else {
						printf("\nHAL_FLASHEx_Erase_error\n");
 8006524:	4834      	ldr	r0, [pc, #208]	; (80065f8 <HAL_UART_RxCpltCallback+0x310>)
 8006526:	f003 ff89 	bl	800a43c <puts>
						dataLength = dataCreate((char*)value, DATA_ERROR, 0);
 800652a:	2200      	movs	r2, #0
 800652c:	2100      	movs	r1, #0
 800652e:	481d      	ldr	r0, [pc, #116]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006530:	f7ff fc32 	bl	8005d98 <dataCreate>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 800653a:	701a      	strb	r2, [r3, #0]
					}
					HAL_FLASH_Lock();
 800653c:	f001 fa78 	bl	8007a30 <HAL_FLASH_Lock>
					break;
 8006540:	e00c      	b.n	800655c <HAL_UART_RxCpltCallback+0x274>
				}
				default : {
					printf("\ndata_error\n");
 8006542:	482e      	ldr	r0, [pc, #184]	; (80065fc <HAL_UART_RxCpltCallback+0x314>)
 8006544:	f003 ff7a 	bl	800a43c <puts>
					dataLength = dataCreate((char*)value, DATA_ERROR, 0);
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	4815      	ldr	r0, [pc, #84]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800654e:	f7ff fc23 	bl	8005d98 <dataCreate>
 8006552:	4603      	mov	r3, r0
 8006554:	461a      	mov	r2, r3
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006558:	701a      	strb	r2, [r3, #0]
					break;
 800655a:	bf00      	nop
				}
			}
			HAL_UART_Transmit(&huart1, value, dataLength, 500);
 800655c:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b29a      	uxth	r2, r3
 8006562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006566:	490f      	ldr	r1, [pc, #60]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 8006568:	4810      	ldr	r0, [pc, #64]	; (80065ac <HAL_UART_RxCpltCallback+0x2c4>)
 800656a:	f003 f923 	bl	80097b4 <HAL_UART_Transmit>
 800656e:	e00b      	b.n	8006588 <HAL_UART_RxCpltCallback+0x2a0>
		} else {
			printf("\nHAL_UART_Receive_error\n");
 8006570:	4823      	ldr	r0, [pc, #140]	; (8006600 <HAL_UART_RxCpltCallback+0x318>)
 8006572:	f003 ff63 	bl	800a43c <puts>
			dataLength = dataCreate((char*)value, DATA_ERROR, 0);
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	480a      	ldr	r0, [pc, #40]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800657c:	f7ff fc0c 	bl	8005d98 <dataCreate>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_UART_RxCpltCallback+0x2d8>)
 8006586:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, value, 1);
 8006588:	2201      	movs	r2, #1
 800658a:	4906      	ldr	r1, [pc, #24]	; (80065a4 <HAL_UART_RxCpltCallback+0x2bc>)
 800658c:	4807      	ldr	r0, [pc, #28]	; (80065ac <HAL_UART_RxCpltCallback+0x2c4>)
 800658e:	f003 fa45 	bl	8009a1c <HAL_UART_Receive_IT>
	}
}
 8006592:	bf00      	nop
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000000 	.word	0x20000000
 80065a0:	0800b304 	.word	0x0800b304
 80065a4:	200001b0 	.word	0x200001b0
 80065a8:	200001b1 	.word	0x200001b1
 80065ac:	200000d8 	.word	0x200000d8
 80065b0:	0800b324 	.word	0x0800b324
 80065b4:	2000011c 	.word	0x2000011c
 80065b8:	20000094 	.word	0x20000094
 80065bc:	0800b348 	.word	0x0800b348
 80065c0:	200001ac 	.word	0x200001ac
 80065c4:	20000095 	.word	0x20000095
 80065c8:	0800b368 	.word	0x0800b368
 80065cc:	20000002 	.word	0x20000002
 80065d0:	0800b384 	.word	0x0800b384
 80065d4:	20000003 	.word	0x20000003
 80065d8:	0800b3a0 	.word	0x0800b3a0
 80065dc:	0800b3bc 	.word	0x0800b3bc
 80065e0:	0800b3dc 	.word	0x0800b3dc
 80065e4:	0800b3fc 	.word	0x0800b3fc
 80065e8:	08018c00 	.word	0x08018c00
 80065ec:	20000098 	.word	0x20000098
 80065f0:	0800b414 	.word	0x0800b414
 80065f4:	0800b428 	.word	0x0800b428
 80065f8:	0800b444 	.word	0x0800b444
 80065fc:	0800b460 	.word	0x0800b460
 8006600:	0800b46c 	.word	0x0800b46c

08006604 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	currLevel = HAL_ADC_GetValue(hadc) / 100;
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fc7f 	bl	8006f10 <HAL_ADC_GetValue>
 8006612:	4603      	mov	r3, r0
 8006614:	4a1b      	ldr	r2, [pc, #108]	; (8006684 <HAL_ADC_ConvCpltCallback+0x80>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <HAL_ADC_ConvCpltCallback+0x84>)
 8006620:	701a      	strb	r2, [r3, #0]
	if (currLevel <= onLevel && !ledState) {
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <HAL_ADC_ConvCpltCallback+0x84>)
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	4b19      	ldr	r3, [pc, #100]	; (800668c <HAL_ADC_ConvCpltCallback+0x88>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d80c      	bhi.n	8006648 <HAL_ADC_ConvCpltCallback+0x44>
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <HAL_ADC_ConvCpltCallback+0x8c>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_ADC_ConvCpltCallback+0x44>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8006636:	2201      	movs	r2, #1
 8006638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800663c:	4815      	ldr	r0, [pc, #84]	; (8006694 <HAL_ADC_ConvCpltCallback+0x90>)
 800663e:	f001 fce5 	bl	800800c <HAL_GPIO_WritePin>
		ledState = 1;
 8006642:	4b13      	ldr	r3, [pc, #76]	; (8006690 <HAL_ADC_ConvCpltCallback+0x8c>)
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
	}
	if (currLevel >= offLevel && ledState) {
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <HAL_ADC_ConvCpltCallback+0x84>)
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_ADC_ConvCpltCallback+0x94>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d30c      	bcc.n	800666e <HAL_ADC_ConvCpltCallback+0x6a>
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <HAL_ADC_ConvCpltCallback+0x8c>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_ADC_ConvCpltCallback+0x6a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800665c:	2200      	movs	r2, #0
 800665e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006662:	480c      	ldr	r0, [pc, #48]	; (8006694 <HAL_ADC_ConvCpltCallback+0x90>)
 8006664:	f001 fcd2 	bl	800800c <HAL_GPIO_WritePin>
		ledState = 0;
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <HAL_ADC_ConvCpltCallback+0x8c>)
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
	}
	printf("\ncurrLevel=%u", currLevel);
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_ADC_ConvCpltCallback+0x84>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	4809      	ldr	r0, [pc, #36]	; (800669c <HAL_ADC_ConvCpltCallback+0x98>)
 8006676:	f003 fe5b 	bl	800a330 <iprintf>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	51eb851f 	.word	0x51eb851f
 8006688:	20000094 	.word	0x20000094
 800668c:	20000002 	.word	0x20000002
 8006690:	20000095 	.word	0x20000095
 8006694:	40010c00 	.word	0x40010c00
 8006698:	20000003 	.word	0x20000003
 800669c:	0800b484 	.word	0x0800b484

080066a0 <_write>:

int _write(int file, char *ptr, int len) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	//int i = 1;
	for (int i = 0; i < len; i++) {
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e009      	b.n	80066c6 <_write+0x26>
		ITM_SendChar((*ptr++));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	60ba      	str	r2, [r7, #8]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff fb46 	bl	8005d4c <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	3301      	adds	r3, #1
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	dbf1      	blt.n	80066b2 <_write+0x12>
	}
	return len;
 80066ce:	687b      	ldr	r3, [r7, #4]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80066dc:	b672      	cpsid	i
}
 80066de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80066e0:	e7fe      	b.n	80066e0 <Error_Handler+0x8>
	...

080066e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_MspInit+0x5c>)
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	4a14      	ldr	r2, [pc, #80]	; (8006740 <HAL_MspInit+0x5c>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6193      	str	r3, [r2, #24]
 80066f6:	4b12      	ldr	r3, [pc, #72]	; (8006740 <HAL_MspInit+0x5c>)
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_MspInit+0x5c>)
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_MspInit+0x5c>)
 8006708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670c:	61d3      	str	r3, [r2, #28]
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <HAL_MspInit+0x5c>)
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <HAL_MspInit+0x60>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	4a04      	ldr	r2, [pc, #16]	; (8006744 <HAL_MspInit+0x60>)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	40021000 	.word	0x40021000
 8006744:	40010000 	.word	0x40010000

08006748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_ADC_MspInit+0x7c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d129      	bne.n	80067bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 800676e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006772:	6193      	str	r3, [r2, #24]
 8006774:	4b14      	ldr	r3, [pc, #80]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	4a10      	ldr	r2, [pc, #64]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 8006786:	f043 0304 	orr.w	r3, r3, #4
 800678a:	6193      	str	r3, [r2, #24]
 800678c:	4b0e      	ldr	r3, [pc, #56]	; (80067c8 <HAL_ADC_MspInit+0x80>)
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	60bb      	str	r3, [r7, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006798:	2301      	movs	r3, #1
 800679a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800679c:	2303      	movs	r3, #3
 800679e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a0:	f107 0310 	add.w	r3, r7, #16
 80067a4:	4619      	mov	r1, r3
 80067a6:	4809      	ldr	r0, [pc, #36]	; (80067cc <HAL_ADC_MspInit+0x84>)
 80067a8:	f001 faac 	bl	8007d04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	2012      	movs	r0, #18
 80067b2:	f000 ffbc 	bl	800772e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80067b6:	2012      	movs	r0, #18
 80067b8:	f000 ffd5 	bl	8007766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80067bc:	bf00      	nop
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40012400 	.word	0x40012400
 80067c8:	40021000 	.word	0x40021000
 80067cc:	40010800 	.word	0x40010800

080067d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <HAL_TIM_Base_MspInit+0x34>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10b      	bne.n	80067fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_TIM_Base_MspInit+0x38>)
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <HAL_TIM_Base_MspInit+0x38>)
 80067e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067ec:	6193      	str	r3, [r2, #24]
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_TIM_Base_MspInit+0x38>)
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	40012c00 	.word	0x40012c00
 8006808:	40021000 	.word	0x40021000

0800680c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006814:	f107 0318 	add.w	r3, r7, #24
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a35      	ldr	r2, [pc, #212]	; (80068fc <HAL_UART_MspInit+0xf0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d13a      	bne.n	80068a2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800682c:	4b34      	ldr	r3, [pc, #208]	; (8006900 <HAL_UART_MspInit+0xf4>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	4a33      	ldr	r2, [pc, #204]	; (8006900 <HAL_UART_MspInit+0xf4>)
 8006832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006836:	6193      	str	r3, [r2, #24]
 8006838:	4b31      	ldr	r3, [pc, #196]	; (8006900 <HAL_UART_MspInit+0xf4>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006844:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <HAL_UART_MspInit+0xf4>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	4a2d      	ldr	r2, [pc, #180]	; (8006900 <HAL_UART_MspInit+0xf4>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	6193      	str	r3, [r2, #24]
 8006850:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <HAL_UART_MspInit+0xf4>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800685c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006862:	2302      	movs	r3, #2
 8006864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006866:	2303      	movs	r3, #3
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686a:	f107 0318 	add.w	r3, r7, #24
 800686e:	4619      	mov	r1, r3
 8006870:	4824      	ldr	r0, [pc, #144]	; (8006904 <HAL_UART_MspInit+0xf8>)
 8006872:	f001 fa47 	bl	8007d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800687a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800687c:	2300      	movs	r3, #0
 800687e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006880:	2300      	movs	r3, #0
 8006882:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006884:	f107 0318 	add.w	r3, r7, #24
 8006888:	4619      	mov	r1, r3
 800688a:	481e      	ldr	r0, [pc, #120]	; (8006904 <HAL_UART_MspInit+0xf8>)
 800688c:	f001 fa3a 	bl	8007d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006890:	2200      	movs	r2, #0
 8006892:	2100      	movs	r1, #0
 8006894:	2025      	movs	r0, #37	; 0x25
 8006896:	f000 ff4a 	bl	800772e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800689a:	2025      	movs	r0, #37	; 0x25
 800689c:	f000 ff63 	bl	8007766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80068a0:	e028      	b.n	80068f4 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <HAL_UART_MspInit+0xfc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d123      	bne.n	80068f4 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b6:	61d3      	str	r3, [r2, #28]
 80068b8:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	4a0d      	ldr	r2, [pc, #52]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068ca:	f043 0304 	orr.w	r3, r3, #4
 80068ce:	6193      	str	r3, [r2, #24]
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <HAL_UART_MspInit+0xf4>)
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80068dc:	230c      	movs	r3, #12
 80068de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e0:	2302      	movs	r3, #2
 80068e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e4:	2302      	movs	r3, #2
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	4619      	mov	r1, r3
 80068ee:	4805      	ldr	r0, [pc, #20]	; (8006904 <HAL_UART_MspInit+0xf8>)
 80068f0:	f001 fa08 	bl	8007d04 <HAL_GPIO_Init>
}
 80068f4:	bf00      	nop
 80068f6:	3728      	adds	r7, #40	; 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40013800 	.word	0x40013800
 8006900:	40021000 	.word	0x40021000
 8006904:	40010800 	.word	0x40010800
 8006908:	40004400 	.word	0x40004400

0800690c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006910:	e7fe      	b.n	8006910 <NMI_Handler+0x4>

08006912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006912:	b480      	push	{r7}
 8006914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006916:	e7fe      	b.n	8006916 <HardFault_Handler+0x4>

08006918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800691c:	e7fe      	b.n	800691c <MemManage_Handler+0x4>

0800691e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800691e:	b480      	push	{r7}
 8006920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006922:	e7fe      	b.n	8006922 <BusFault_Handler+0x4>

08006924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006928:	e7fe      	b.n	8006928 <UsageFault_Handler+0x4>

0800692a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800692a:	b480      	push	{r7}
 800692c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr

08006936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006936:	b480      	push	{r7}
 8006938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800693a:	bf00      	nop
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006942:	b480      	push	{r7}
 8006944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006952:	f000 f933 	bl	8006bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006956:	bf00      	nop
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006960:	4802      	ldr	r0, [pc, #8]	; (800696c <ADC1_2_IRQHandler+0x10>)
 8006962:	f000 fae1 	bl	8006f28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	200000a8 	.word	0x200000a8

08006970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006974:	4802      	ldr	r0, [pc, #8]	; (8006980 <USART1_IRQHandler+0x10>)
 8006976:	f003 f881 	bl	8009a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	200000d8 	.word	0x200000d8

08006984 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006988:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800698c:	f001 fb56 	bl	800803c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006990:	bf00      	nop
 8006992:	bd80      	pop	{r7, pc}

08006994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e00a      	b.n	80069bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80069a6:	f3af 8000 	nop.w
 80069aa:	4601      	mov	r1, r0
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	60ba      	str	r2, [r7, #8]
 80069b2:	b2ca      	uxtb	r2, r1
 80069b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	3301      	adds	r3, #1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	dbf0      	blt.n	80069a6 <_read+0x12>
	}

return len;
 80069c4:	687b      	ldr	r3, [r7, #4]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
	return -1;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069f4:	605a      	str	r2, [r3, #4]
	return 0;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <_isatty>:

int _isatty(int file)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
	return 1;
 8006a0a:	2301      	movs	r3, #1
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
	return 0;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
	...

08006a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a38:	4a14      	ldr	r2, [pc, #80]	; (8006a8c <_sbrk+0x5c>)
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <_sbrk+0x60>)
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <_sbrk+0x64>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <_sbrk+0x64>)
 8006a4e:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <_sbrk+0x68>)
 8006a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <_sbrk+0x64>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d207      	bcs.n	8006a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a60:	f003 fc34 	bl	800a2cc <__errno>
 8006a64:	4603      	mov	r3, r0
 8006a66:	220c      	movs	r2, #12
 8006a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a6e:	e009      	b.n	8006a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a70:	4b08      	ldr	r3, [pc, #32]	; (8006a94 <_sbrk+0x64>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <_sbrk+0x64>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	4a05      	ldr	r2, [pc, #20]	; (8006a94 <_sbrk+0x64>)
 8006a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a82:	68fb      	ldr	r3, [r7, #12]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20005000 	.word	0x20005000
 8006a90:	00000400 	.word	0x00000400
 8006a94:	2000009c 	.word	0x2000009c
 8006a98:	200001f0 	.word	0x200001f0

08006a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a9c:	480c      	ldr	r0, [pc, #48]	; (8006ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a9e:	490d      	ldr	r1, [pc, #52]	; (8006ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006aa0:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006aa4:	e002      	b.n	8006aac <LoopCopyDataInit>

08006aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aaa:	3304      	adds	r3, #4

08006aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ab0:	d3f9      	bcc.n	8006aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006ab4:	4c0a      	ldr	r4, [pc, #40]	; (8006ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ab8:	e001      	b.n	8006abe <LoopFillZerobss>

08006aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006abc:	3204      	adds	r2, #4

08006abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ac0:	d3fb      	bcc.n	8006aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ac2:	f000 f810 	bl	8006ae6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ac6:	f003 fc07 	bl	800a2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006aca:	f7ff f9c3 	bl	8005e54 <main>
  bx lr
 8006ace:	4770      	bx	lr
  ldr r0, =_sdata
 8006ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ad4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8006ad8:	0800b56c 	.word	0x0800b56c
  ldr r2, =_sbss
 8006adc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8006ae0:	200001f0 	.word	0x200001f0

08006ae4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ae4:	e7fe      	b.n	8006ae4 <CAN1_RX1_IRQHandler>

08006ae6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr
	...

08006af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <HAL_Init+0x28>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a07      	ldr	r2, [pc, #28]	; (8006b1c <HAL_Init+0x28>)
 8006afe:	f043 0310 	orr.w	r3, r3, #16
 8006b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b04:	2003      	movs	r0, #3
 8006b06:	f000 fe07 	bl	8007718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f000 f826 	bl	8006b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b10:	f7ff fde8 	bl	80066e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40022000 	.word	0x40022000

08006b20 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <HAL_DeInit+0x2c>)
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b2a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <HAL_DeInit+0x2c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_DeInit+0x2c>)
 8006b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b38:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <HAL_DeInit+0x2c>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006b40:	f000 f806 	bl	8006b50 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000

08006b50 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b64:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <HAL_InitTick+0x54>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <HAL_InitTick+0x58>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fe05 	bl	800778a <HAL_SYSTICK_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e00e      	b.n	8006ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b0f      	cmp	r3, #15
 8006b8e:	d80a      	bhi.n	8006ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b90:	2200      	movs	r2, #0
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b98:	f000 fdc9 	bl	800772e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b9c:	4a06      	ldr	r2, [pc, #24]	; (8006bb8 <HAL_InitTick+0x5c>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000004 	.word	0x20000004
 8006bb4:	2000000c 	.word	0x2000000c
 8006bb8:	20000008 	.word	0x20000008

08006bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <HAL_IncTick+0x1c>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_IncTick+0x20>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4413      	add	r3, r2
 8006bcc:	4a03      	ldr	r2, [pc, #12]	; (8006bdc <HAL_IncTick+0x20>)
 8006bce:	6013      	str	r3, [r2, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr
 8006bd8:	2000000c 	.word	0x2000000c
 8006bdc:	200001b8 	.word	0x200001b8

08006be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return uwTick;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <HAL_GetTick+0x10>)
 8006be6:	681b      	ldr	r3, [r3, #0]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr
 8006bf0:	200001b8 	.word	0x200001b8

08006bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e0be      	b.n	8006d94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fd88 	bl	8006748 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fb93 	bl	8007364 <ADC_ConversionStop_Disable>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0310 	and.w	r3, r3, #16
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f040 8099 	bne.w	8006d82 <HAL_ADC_Init+0x18e>
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f040 8095 	bne.w	8006d82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c60:	f023 0302 	bic.w	r3, r3, #2
 8006c64:	f043 0202 	orr.w	r2, r3, #2
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7b1b      	ldrb	r3, [r3, #12]
 8006c7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006c7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8c:	d003      	beq.n	8006c96 <HAL_ADC_Init+0xa2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d102      	bne.n	8006c9c <HAL_ADC_Init+0xa8>
 8006c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9a:	e000      	b.n	8006c9e <HAL_ADC_Init+0xaa>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7d1b      	ldrb	r3, [r3, #20]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d119      	bne.n	8006ce0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	7b1b      	ldrb	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	035a      	lsls	r2, r3, #13
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f043 0220 	orr.w	r2, r3, #32
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	f043 0201 	orr.w	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	4b28      	ldr	r3, [pc, #160]	; (8006d9c <HAL_ADC_Init+0x1a8>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	430b      	orrs	r3, r1
 8006d06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d10:	d003      	beq.n	8006d1a <HAL_ADC_Init+0x126>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d104      	bne.n	8006d24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	051b      	lsls	r3, r3, #20
 8006d22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b18      	ldr	r3, [pc, #96]	; (8006da0 <HAL_ADC_Init+0x1ac>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d10b      	bne.n	8006d60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	f043 0201 	orr.w	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d5e:	e018      	b.n	8006d92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f023 0312 	bic.w	r3, r3, #18
 8006d68:	f043 0210 	orr.w	r2, r3, #16
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	f043 0201 	orr.w	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d80:	e007      	b.n	8006d92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	f043 0210 	orr.w	r2, r3, #16
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	ffe1f7fd 	.word	0xffe1f7fd
 8006da0:	ff1f0efe 	.word	0xff1f0efe

08006da4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_ADC_Start_IT+0x1a>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0a0      	b.n	8006f00 <HAL_ADC_Start_IT+0x15c>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fa72 	bl	80072b0 <ADC_Enable>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 808f 	bne.w	8006ef6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a45      	ldr	r2, [pc, #276]	; (8006f08 <HAL_ADC_Start_IT+0x164>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d105      	bne.n	8006e02 <HAL_ADC_Start_IT+0x5e>
 8006df6:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <HAL_ADC_Start_IT+0x168>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d115      	bne.n	8006e2e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d026      	beq.n	8006e6a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e2c:	e01d      	b.n	8006e6a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a33      	ldr	r2, [pc, #204]	; (8006f0c <HAL_ADC_Start_IT+0x168>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d004      	beq.n	8006e4e <HAL_ADC_Start_IT+0xaa>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a2f      	ldr	r2, [pc, #188]	; (8006f08 <HAL_ADC_Start_IT+0x164>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10d      	bne.n	8006e6a <HAL_ADC_Start_IT+0xc6>
 8006e4e:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_ADC_Start_IT+0x168>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d006      	beq.n	8006e84 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	f023 0206 	bic.w	r2, r3, #6
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e82:	e002      	b.n	8006e8a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f06f 0202 	mvn.w	r2, #2
 8006e9a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0220 	orr.w	r2, r2, #32
 8006eaa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006eb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006eba:	d113      	bne.n	8006ee4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006ec0:	4a11      	ldr	r2, [pc, #68]	; (8006f08 <HAL_ADC_Start_IT+0x164>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d105      	bne.n	8006ed2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_ADC_Start_IT+0x168>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d108      	bne.n	8006ee4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006ee0:	609a      	str	r2, [r3, #8]
 8006ee2:	e00c      	b.n	8006efe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	e003      	b.n	8006efe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40012800 	.word	0x40012800
 8006f0c:	40012400 	.word	0x40012400

08006f10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr

08006f28 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d140      	bne.n	8006fc0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d139      	bne.n	8006fc0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d105      	bne.n	8006f64 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006f6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006f72:	d11d      	bne.n	8006fb0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d119      	bne.n	8006fb0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0220 	bic.w	r2, r2, #32
 8006f8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d105      	bne.n	8006fb0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	f043 0201 	orr.w	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff fb27 	bl	8006604 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0212 	mvn.w	r2, #18
 8006fbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d14f      	bne.n	800706e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d148      	bne.n	800706e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ffe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8007002:	d012      	beq.n	800702a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800700e:	2b00      	cmp	r3, #0
 8007010:	d125      	bne.n	800705e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800701c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007020:	d11d      	bne.n	800705e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007038:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d105      	bne.n	800705e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007056:	f043 0201 	orr.w	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa6e 	bl	8007540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 020c 	mvn.w	r2, #12
 800706c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d114      	bne.n	80070a6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d10d      	bne.n	80070a6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f809 	bl	80070ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0201 	mvn.w	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr

080070c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_ADC_ConfigChannel+0x20>
 80070dc:	2302      	movs	r3, #2
 80070de:	e0dc      	b.n	800729a <HAL_ADC_ConfigChannel+0x1da>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	d81c      	bhi.n	800712a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	3b05      	subs	r3, #5
 8007102:	221f      	movs	r2, #31
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	43db      	mvns	r3, r3
 800710a:	4019      	ands	r1, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	3b05      	subs	r3, #5
 800711c:	fa00 f203 	lsl.w	r2, r0, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	635a      	str	r2, [r3, #52]	; 0x34
 8007128:	e03c      	b.n	80071a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b0c      	cmp	r3, #12
 8007130:	d81c      	bhi.n	800716c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	3b23      	subs	r3, #35	; 0x23
 8007144:	221f      	movs	r2, #31
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	43db      	mvns	r3, r3
 800714c:	4019      	ands	r1, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	3b23      	subs	r3, #35	; 0x23
 800715e:	fa00 f203 	lsl.w	r2, r0, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
 800716a:	e01b      	b.n	80071a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	3b41      	subs	r3, #65	; 0x41
 800717e:	221f      	movs	r2, #31
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	43db      	mvns	r3, r3
 8007186:	4019      	ands	r1, r3
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	3b41      	subs	r3, #65	; 0x41
 8007198:	fa00 f203 	lsl.w	r2, r0, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b09      	cmp	r3, #9
 80071aa:	d91c      	bls.n	80071e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68d9      	ldr	r1, [r3, #12]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	4413      	add	r3, r2
 80071bc:	3b1e      	subs	r3, #30
 80071be:	2207      	movs	r2, #7
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	4019      	ands	r1, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6898      	ldr	r0, [r3, #8]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	3b1e      	subs	r3, #30
 80071d8:	fa00 f203 	lsl.w	r2, r0, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	60da      	str	r2, [r3, #12]
 80071e4:	e019      	b.n	800721a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6919      	ldr	r1, [r3, #16]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	2207      	movs	r2, #7
 80071f8:	fa02 f303 	lsl.w	r3, r2, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	4019      	ands	r1, r3
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	6898      	ldr	r0, [r3, #8]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	fa00 f203 	lsl.w	r2, r0, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b10      	cmp	r3, #16
 8007220:	d003      	beq.n	800722a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007226:	2b11      	cmp	r3, #17
 8007228:	d132      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1d      	ldr	r2, [pc, #116]	; (80072a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d125      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d126      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007250:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b10      	cmp	r3, #16
 8007258:	d11a      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800725a:	4b13      	ldr	r3, [pc, #76]	; (80072a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a13      	ldr	r2, [pc, #76]	; (80072ac <HAL_ADC_ConfigChannel+0x1ec>)
 8007260:	fba2 2303 	umull	r2, r3, r2, r3
 8007264:	0c9a      	lsrs	r2, r3, #18
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007270:	e002      	b.n	8007278 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f9      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x1b2>
 800727e:	e007      	b.n	8007290 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007284:	f043 0220 	orr.w	r2, r3, #32
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007298:	7bfb      	ldrb	r3, [r7, #15]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr
 80072a4:	40012400 	.word	0x40012400
 80072a8:	20000004 	.word	0x20000004
 80072ac:	431bde83 	.word	0x431bde83

080072b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d040      	beq.n	8007350 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80072de:	4b1f      	ldr	r3, [pc, #124]	; (800735c <ADC_Enable+0xac>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <ADC_Enable+0xb0>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	0c9b      	lsrs	r3, r3, #18
 80072ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80072ec:	e002      	b.n	80072f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f9      	bne.n	80072ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80072fa:	f7ff fc71 	bl	8006be0 <HAL_GetTick>
 80072fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007300:	e01f      	b.n	8007342 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007302:	f7ff fc6d 	bl	8006be0 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d918      	bls.n	8007342 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b01      	cmp	r3, #1
 800731c:	d011      	beq.n	8007342 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f043 0210 	orr.w	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e007      	b.n	8007352 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d1d8      	bne.n	8007302 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000004 	.word	0x20000004
 8007360:	431bde83 	.word	0x431bde83

08007364 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d12e      	bne.n	80073dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800738e:	f7ff fc27 	bl	8006be0 <HAL_GetTick>
 8007392:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007394:	e01b      	b.n	80073ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007396:	f7ff fc23 	bl	8006be0 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d914      	bls.n	80073ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d10d      	bne.n	80073ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f043 0210 	orr.w	r2, r3, #16
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f043 0201 	orr.w	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e007      	b.n	80073de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d0dc      	beq.n	8007396 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_ADCEx_Calibration_Start+0x1e>
 8007402:	2302      	movs	r3, #2
 8007404:	e095      	b.n	8007532 <HAL_ADCEx_Calibration_Start+0x14a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff ffa8 	bl	8007364 <ADC_ConversionStop_Disable>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8084 	bne.w	8007528 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007428:	f023 0302 	bic.w	r3, r3, #2
 800742c:	f043 0202 	orr.w	r2, r3, #2
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8007434:	4b41      	ldr	r3, [pc, #260]	; (800753c <HAL_ADCEx_Calibration_Start+0x154>)
 8007436:	681c      	ldr	r4, [r3, #0]
 8007438:	2002      	movs	r0, #2
 800743a:	f001 faf1 	bl	8008a20 <HAL_RCCEx_GetPeriphCLKFreq>
 800743e:	4603      	mov	r3, r0
 8007440:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8007444:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8007446:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8007448:	e002      	b.n	8007450 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3b01      	subs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f9      	bne.n	800744a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff ff2a 	bl	80072b0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800746c:	f7ff fbb8 	bl	8006be0 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007472:	e01b      	b.n	80074ac <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007474:	f7ff fbb4 	bl	8006be0 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b0a      	cmp	r3, #10
 8007480:	d914      	bls.n	80074ac <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00d      	beq.n	80074ac <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f023 0312 	bic.w	r3, r3, #18
 8007498:	f043 0210 	orr.w	r2, r3, #16
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e042      	b.n	8007532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1dc      	bne.n	8007474 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0204 	orr.w	r2, r2, #4
 80074c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80074ca:	f7ff fb89 	bl	8006be0 <HAL_GetTick>
 80074ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80074d0:	e01b      	b.n	800750a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80074d2:	f7ff fb85 	bl	8006be0 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b0a      	cmp	r3, #10
 80074de:	d914      	bls.n	800750a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00d      	beq.n	800750a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	f023 0312 	bic.w	r3, r3, #18
 80074f6:	f043 0210 	orr.w	r2, r3, #16
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e013      	b.n	8007532 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1dc      	bne.n	80074d2 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	f043 0201 	orr.w	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}
 800753a:	bf00      	nop
 800753c:	20000004 	.word	0x20000004

08007540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
	...

08007554 <__NVIC_SetPriorityGrouping>:
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <__NVIC_SetPriorityGrouping+0x44>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007570:	4013      	ands	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800757c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007586:	4a04      	ldr	r2, [pc, #16]	; (8007598 <__NVIC_SetPriorityGrouping+0x44>)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	60d3      	str	r3, [r2, #12]
}
 800758c:	bf00      	nop
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000ed00 	.word	0xe000ed00

0800759c <__NVIC_GetPriorityGrouping>:
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <__NVIC_GetPriorityGrouping+0x18>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	f003 0307 	and.w	r3, r3, #7
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <__NVIC_EnableIRQ>:
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db0b      	blt.n	80075e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	f003 021f 	and.w	r2, r3, #31
 80075d0:	4906      	ldr	r1, [pc, #24]	; (80075ec <__NVIC_EnableIRQ+0x34>)
 80075d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2001      	movs	r0, #1
 80075da:	fa00 f202 	lsl.w	r2, r0, r2
 80075de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	e000e100 	.word	0xe000e100

080075f0 <__NVIC_SetPriority>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007600:	2b00      	cmp	r3, #0
 8007602:	db0a      	blt.n	800761a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	490c      	ldr	r1, [pc, #48]	; (800763c <__NVIC_SetPriority+0x4c>)
 800760a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800760e:	0112      	lsls	r2, r2, #4
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	440b      	add	r3, r1
 8007614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007618:	e00a      	b.n	8007630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <__NVIC_SetPriority+0x50>)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	3b04      	subs	r3, #4
 8007628:	0112      	lsls	r2, r2, #4
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	440b      	add	r3, r1
 800762e:	761a      	strb	r2, [r3, #24]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	bc80      	pop	{r7}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	e000e100 	.word	0xe000e100
 8007640:	e000ed00 	.word	0xe000ed00

08007644 <NVIC_EncodePriority>:
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	; 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f1c3 0307 	rsb	r3, r3, #7
 800765e:	2b04      	cmp	r3, #4
 8007660:	bf28      	it	cs
 8007662:	2304      	movcs	r3, #4
 8007664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3304      	adds	r3, #4
 800766a:	2b06      	cmp	r3, #6
 800766c:	d902      	bls.n	8007674 <NVIC_EncodePriority+0x30>
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3b03      	subs	r3, #3
 8007672:	e000      	b.n	8007676 <NVIC_EncodePriority+0x32>
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	fa02 f303 	lsl.w	r3, r2, r3
 8007682:	43da      	mvns	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	401a      	ands	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800768c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	fa01 f303 	lsl.w	r3, r1, r3
 8007696:	43d9      	mvns	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800769c:	4313      	orrs	r3, r2
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3724      	adds	r7, #36	; 0x24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr

080076a8 <__NVIC_SystemReset>:
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80076ac:	f3bf 8f4f 	dsb	sy
}
 80076b0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <__NVIC_SystemReset+0x24>)
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80076ba:	4904      	ldr	r1, [pc, #16]	; (80076cc <__NVIC_SystemReset+0x24>)
 80076bc:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <__NVIC_SystemReset+0x28>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80076c2:	f3bf 8f4f 	dsb	sy
}
 80076c6:	bf00      	nop
    __NOP();
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <__NVIC_SystemReset+0x20>
 80076cc:	e000ed00 	.word	0xe000ed00
 80076d0:	05fa0004 	.word	0x05fa0004

080076d4 <SysTick_Config>:
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3b01      	subs	r3, #1
 80076e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076e4:	d301      	bcc.n	80076ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80076e6:	2301      	movs	r3, #1
 80076e8:	e00f      	b.n	800770a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076ea:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <SysTick_Config+0x40>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80076f2:	210f      	movs	r1, #15
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f8:	f7ff ff7a 	bl	80075f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <SysTick_Config+0x40>)
 80076fe:	2200      	movs	r2, #0
 8007700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007702:	4b04      	ldr	r3, [pc, #16]	; (8007714 <SysTick_Config+0x40>)
 8007704:	2207      	movs	r2, #7
 8007706:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	e000e010 	.word	0xe000e010

08007718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff ff17 	bl	8007554 <__NVIC_SetPriorityGrouping>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	4603      	mov	r3, r0
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007740:	f7ff ff2c 	bl	800759c <__NVIC_GetPriorityGrouping>
 8007744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	6978      	ldr	r0, [r7, #20]
 800774c:	f7ff ff7a 	bl	8007644 <NVIC_EncodePriority>
 8007750:	4602      	mov	r2, r0
 8007752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007756:	4611      	mov	r1, r2
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff ff49 	bl	80075f0 <__NVIC_SetPriority>
}
 800775e:	bf00      	nop
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	4603      	mov	r3, r0
 800776e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff ff1f 	bl	80075b8 <__NVIC_EnableIRQ>
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007786:	f7ff ff8f 	bl	80076a8 <__NVIC_SystemReset>

0800778a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ff9e 	bl	80076d4 <SysTick_Config>
 8007798:	4603      	mov	r3, r0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d008      	beq.n	80077ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2204      	movs	r2, #4
 80077bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e020      	b.n	800780c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 020e 	bic.w	r2, r2, #14
 80077d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	2101      	movs	r1, #1
 80077f4:	fa01 f202 	lsl.w	r2, r1, r2
 80077f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr
	...

08007818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800782a:	2b02      	cmp	r3, #2
 800782c:	d005      	beq.n	800783a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
 8007838:	e051      	b.n	80078de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 020e 	bic.w	r2, r2, #14
 8007848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a22      	ldr	r2, [pc, #136]	; (80078e8 <HAL_DMA_Abort_IT+0xd0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d029      	beq.n	80078b8 <HAL_DMA_Abort_IT+0xa0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a20      	ldr	r2, [pc, #128]	; (80078ec <HAL_DMA_Abort_IT+0xd4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x9c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <HAL_DMA_Abort_IT+0xd8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01a      	beq.n	80078ae <HAL_DMA_Abort_IT+0x96>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <HAL_DMA_Abort_IT+0xdc>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d012      	beq.n	80078a8 <HAL_DMA_Abort_IT+0x90>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <HAL_DMA_Abort_IT+0xe0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00a      	beq.n	80078a2 <HAL_DMA_Abort_IT+0x8a>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <HAL_DMA_Abort_IT+0xe4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d102      	bne.n	800789c <HAL_DMA_Abort_IT+0x84>
 8007896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800789a:	e00e      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 800789c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078a0:	e00b      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 80078a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078a6:	e008      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 80078a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ac:	e005      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 80078ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078b2:	e002      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 80078b4:	2310      	movs	r3, #16
 80078b6:	e000      	b.n	80078ba <HAL_DMA_Abort_IT+0xa2>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4a11      	ldr	r2, [pc, #68]	; (8007900 <HAL_DMA_Abort_IT+0xe8>)
 80078bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
    } 
  }
  return status;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40020008 	.word	0x40020008
 80078ec:	4002001c 	.word	0x4002001c
 80078f0:	40020030 	.word	0x40020030
 80078f4:	40020044 	.word	0x40020044
 80078f8:	40020058 	.word	0x40020058
 80078fc:	4002006c 	.word	0x4002006c
 8007900:	40020000 	.word	0x40020000

08007904 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800791e:	4b2f      	ldr	r3, [pc, #188]	; (80079dc <HAL_FLASH_Program+0xd8>)
 8007920:	7e1b      	ldrb	r3, [r3, #24]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d101      	bne.n	800792a <HAL_FLASH_Program+0x26>
 8007926:	2302      	movs	r3, #2
 8007928:	e054      	b.n	80079d4 <HAL_FLASH_Program+0xd0>
 800792a:	4b2c      	ldr	r3, [pc, #176]	; (80079dc <HAL_FLASH_Program+0xd8>)
 800792c:	2201      	movs	r2, #1
 800792e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007934:	f000 f8a8 	bl	8007a88 <FLASH_WaitForLastOperation>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d144      	bne.n	80079cc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d102      	bne.n	800794e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8007948:	2301      	movs	r3, #1
 800794a:	757b      	strb	r3, [r7, #21]
 800794c:	e007      	b.n	800795e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d102      	bne.n	800795a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007954:	2302      	movs	r3, #2
 8007956:	757b      	strb	r3, [r7, #21]
 8007958:	e001      	b.n	800795e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800795a:	2304      	movs	r3, #4
 800795c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800795e:	2300      	movs	r3, #0
 8007960:	75bb      	strb	r3, [r7, #22]
 8007962:	e02d      	b.n	80079c0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007964:	7dbb      	ldrb	r3, [r7, #22]
 8007966:	005a      	lsls	r2, r3, #1
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	eb02 0c03 	add.w	ip, r2, r3
 800796e:	7dbb      	ldrb	r3, [r7, #22]
 8007970:	0119      	lsls	r1, r3, #4
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	f1c1 0620 	rsb	r6, r1, #32
 800797a:	f1a1 0020 	sub.w	r0, r1, #32
 800797e:	fa22 f401 	lsr.w	r4, r2, r1
 8007982:	fa03 f606 	lsl.w	r6, r3, r6
 8007986:	4334      	orrs	r4, r6
 8007988:	fa23 f000 	lsr.w	r0, r3, r0
 800798c:	4304      	orrs	r4, r0
 800798e:	fa23 f501 	lsr.w	r5, r3, r1
 8007992:	b2a3      	uxth	r3, r4
 8007994:	4619      	mov	r1, r3
 8007996:	4660      	mov	r0, ip
 8007998:	f000 f85a 	bl	8007a50 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800799c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80079a0:	f000 f872 	bl	8007a88 <FLASH_WaitForLastOperation>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <HAL_FLASH_Program+0xdc>)
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <HAL_FLASH_Program+0xdc>)
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d107      	bne.n	80079ca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80079ba:	7dbb      	ldrb	r3, [r7, #22]
 80079bc:	3301      	adds	r3, #1
 80079be:	75bb      	strb	r3, [r7, #22]
 80079c0:	7dba      	ldrb	r2, [r7, #22]
 80079c2:	7d7b      	ldrb	r3, [r7, #21]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d3cd      	bcc.n	8007964 <HAL_FLASH_Program+0x60>
 80079c8:	e000      	b.n	80079cc <HAL_FLASH_Program+0xc8>
      {
        break;
 80079ca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80079cc:	4b03      	ldr	r3, [pc, #12]	; (80079dc <HAL_FLASH_Program+0xd8>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	761a      	strb	r2, [r3, #24]

  return status;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079dc:	200001c0 	.word	0x200001c0
 80079e0:	40022000 	.word	0x40022000

080079e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80079ee:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <HAL_FLASH_Unlock+0x40>)
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80079fa:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <HAL_FLASH_Unlock+0x40>)
 80079fc:	4a0a      	ldr	r2, [pc, #40]	; (8007a28 <HAL_FLASH_Unlock+0x44>)
 80079fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007a00:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <HAL_FLASH_Unlock+0x40>)
 8007a02:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <HAL_FLASH_Unlock+0x48>)
 8007a04:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007a06:	4b07      	ldr	r3, [pc, #28]	; (8007a24 <HAL_FLASH_Unlock+0x40>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007a16:	79fb      	ldrb	r3, [r7, #7]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40022000 	.word	0x40022000
 8007a28:	45670123 	.word	0x45670123
 8007a2c:	cdef89ab 	.word	0xcdef89ab

08007a30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <HAL_FLASH_Lock+0x1c>)
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4a04      	ldr	r2, [pc, #16]	; (8007a4c <HAL_FLASH_Lock+0x1c>)
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	40022000 	.word	0x40022000

08007a50 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <FLASH_Program_HalfWord+0x30>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <FLASH_Program_HalfWord+0x34>)
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	4a07      	ldr	r2, [pc, #28]	; (8007a84 <FLASH_Program_HalfWord+0x34>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	887a      	ldrh	r2, [r7, #2]
 8007a72:	801a      	strh	r2, [r3, #0]
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	200001c0 	.word	0x200001c0
 8007a84:	40022000 	.word	0x40022000

08007a88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007a90:	f7ff f8a6 	bl	8006be0 <HAL_GetTick>
 8007a94:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007a96:	e010      	b.n	8007aba <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a9e:	d00c      	beq.n	8007aba <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <FLASH_WaitForLastOperation+0x2e>
 8007aa6:	f7ff f89b 	bl	8006be0 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d201      	bcs.n	8007aba <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e025      	b.n	8007b06 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e8      	bne.n	8007a98 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007ac6:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007ad8:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10b      	bne.n	8007afc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <FLASH_WaitForLastOperation+0x88>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007afc:	f000 f80a 	bl	8007b14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40022000 	.word	0x40022000

08007b14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007b1e:	4b23      	ldr	r3, [pc, #140]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007b2a:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f043 0302 	orr.w	r3, r3, #2
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b34:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f043 0310 	orr.w	r3, r3, #16
 8007b3c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007b3e:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007b4a:	4b19      	ldr	r3, [pc, #100]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b54:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f043 0304 	orr.w	r3, r3, #4
 8007b5c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00b      	beq.n	8007b82 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007b6a:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f043 0304 	orr.w	r3, r3, #4
 8007b72:	4a0f      	ldr	r2, [pc, #60]	; (8007bb0 <FLASH_SetErrorCode+0x9c>)
 8007b74:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b7c:	f023 0301 	bic.w	r3, r3, #1
 8007b80:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f240 1201 	movw	r2, #257	; 0x101
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d106      	bne.n	8007b9a <FLASH_SetErrorCode+0x86>
 8007b8c:	4b07      	ldr	r3, [pc, #28]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4a06      	ldr	r2, [pc, #24]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b92:	f023 0301 	bic.w	r3, r3, #1
 8007b96:	61d3      	str	r3, [r2, #28]
}  
 8007b98:	e002      	b.n	8007ba0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <FLASH_SetErrorCode+0x98>)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60d3      	str	r3, [r2, #12]
}  
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40022000 	.word	0x40022000
 8007bb0:	200001c0 	.word	0x200001c0

08007bb4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <HAL_FLASHEx_Erase+0xd0>)
 8007bc8:	7e1b      	ldrb	r3, [r3, #24]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_FLASHEx_Erase+0x1e>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e053      	b.n	8007c7a <HAL_FLASHEx_Erase+0xc6>
 8007bd2:	4b2c      	ldr	r3, [pc, #176]	; (8007c84 <HAL_FLASHEx_Erase+0xd0>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d116      	bne.n	8007c0e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007be4:	f7ff ff50 	bl	8007a88 <FLASH_WaitForLastOperation>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d141      	bne.n	8007c72 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8007bee:	2001      	movs	r0, #1
 8007bf0:	f000 f84c 	bl	8007c8c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bf8:	f7ff ff46 	bl	8007a88 <FLASH_WaitForLastOperation>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007c00:	4b21      	ldr	r3, [pc, #132]	; (8007c88 <HAL_FLASHEx_Erase+0xd4>)
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	4a20      	ldr	r2, [pc, #128]	; (8007c88 <HAL_FLASHEx_Erase+0xd4>)
 8007c06:	f023 0304 	bic.w	r3, r3, #4
 8007c0a:	6113      	str	r3, [r2, #16]
 8007c0c:	e031      	b.n	8007c72 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007c0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c12:	f7ff ff39 	bl	8007a88 <FLASH_WaitForLastOperation>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d12a      	bne.n	8007c72 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c22:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	e019      	b.n	8007c60 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8007c2c:	68b8      	ldr	r0, [r7, #8]
 8007c2e:	f000 f849 	bl	8007cc4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c36:	f7ff ff27 	bl	8007a88 <FLASH_WaitForLastOperation>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <HAL_FLASHEx_Erase+0xd4>)
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	4a11      	ldr	r2, [pc, #68]	; (8007c88 <HAL_FLASHEx_Erase+0xd4>)
 8007c44:	f023 0302 	bic.w	r3, r3, #2
 8007c48:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	601a      	str	r2, [r3, #0]
            break;
 8007c56:	e00c      	b.n	8007c72 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c5e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	029a      	lsls	r2, r3, #10
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d3dc      	bcc.n	8007c2c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <HAL_FLASHEx_Erase+0xd0>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	761a      	strb	r2, [r3, #24]

  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200001c0 	.word	0x200001c0
 8007c88:	40022000 	.word	0x40022000

08007c8c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007c94:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <FLASH_MassErase+0x30>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <FLASH_MassErase+0x34>)
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4a08      	ldr	r2, [pc, #32]	; (8007cc0 <FLASH_MassErase+0x34>)
 8007ca0:	f043 0304 	orr.w	r3, r3, #4
 8007ca4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <FLASH_MassErase+0x34>)
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <FLASH_MassErase+0x34>)
 8007cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	200001c0 	.word	0x200001c0
 8007cc0:	40022000 	.word	0x40022000

08007cc4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <FLASH_PageErase+0x38>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <FLASH_PageErase+0x3c>)
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <FLASH_PageErase+0x3c>)
 8007cd8:	f043 0302 	orr.w	r3, r3, #2
 8007cdc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007cde:	4a08      	ldr	r2, [pc, #32]	; (8007d00 <FLASH_PageErase+0x3c>)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ce4:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <FLASH_PageErase+0x3c>)
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <FLASH_PageErase+0x3c>)
 8007cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	200001c0 	.word	0x200001c0
 8007d00:	40022000 	.word	0x40022000

08007d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b08b      	sub	sp, #44	; 0x2c
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007d12:	2300      	movs	r3, #0
 8007d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d16:	e169      	b.n	8007fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007d18:	2201      	movs	r2, #1
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	69fa      	ldr	r2, [r7, #28]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	f040 8158 	bne.w	8007fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	4a9a      	ldr	r2, [pc, #616]	; (8007fa4 <HAL_GPIO_Init+0x2a0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d05e      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
 8007d40:	4a98      	ldr	r2, [pc, #608]	; (8007fa4 <HAL_GPIO_Init+0x2a0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d875      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d46:	4a98      	ldr	r2, [pc, #608]	; (8007fa8 <HAL_GPIO_Init+0x2a4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d058      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
 8007d4c:	4a96      	ldr	r2, [pc, #600]	; (8007fa8 <HAL_GPIO_Init+0x2a4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d86f      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d52:	4a96      	ldr	r2, [pc, #600]	; (8007fac <HAL_GPIO_Init+0x2a8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d052      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
 8007d58:	4a94      	ldr	r2, [pc, #592]	; (8007fac <HAL_GPIO_Init+0x2a8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d869      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d5e:	4a94      	ldr	r2, [pc, #592]	; (8007fb0 <HAL_GPIO_Init+0x2ac>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d04c      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
 8007d64:	4a92      	ldr	r2, [pc, #584]	; (8007fb0 <HAL_GPIO_Init+0x2ac>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d863      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d6a:	4a92      	ldr	r2, [pc, #584]	; (8007fb4 <HAL_GPIO_Init+0x2b0>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d046      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
 8007d70:	4a90      	ldr	r2, [pc, #576]	; (8007fb4 <HAL_GPIO_Init+0x2b0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d85d      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d76:	2b12      	cmp	r3, #18
 8007d78:	d82a      	bhi.n	8007dd0 <HAL_GPIO_Init+0xcc>
 8007d7a:	2b12      	cmp	r3, #18
 8007d7c:	d859      	bhi.n	8007e32 <HAL_GPIO_Init+0x12e>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_GPIO_Init+0x80>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007dff 	.word	0x08007dff
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	08007deb 	.word	0x08007deb
 8007d90:	08007e2d 	.word	0x08007e2d
 8007d94:	08007e33 	.word	0x08007e33
 8007d98:	08007e33 	.word	0x08007e33
 8007d9c:	08007e33 	.word	0x08007e33
 8007da0:	08007e33 	.word	0x08007e33
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e33 	.word	0x08007e33
 8007db0:	08007e33 	.word	0x08007e33
 8007db4:	08007e33 	.word	0x08007e33
 8007db8:	08007e33 	.word	0x08007e33
 8007dbc:	08007e33 	.word	0x08007e33
 8007dc0:	08007e33 	.word	0x08007e33
 8007dc4:	08007e33 	.word	0x08007e33
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	4a79      	ldr	r2, [pc, #484]	; (8007fb8 <HAL_GPIO_Init+0x2b4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d013      	beq.n	8007dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007dd6:	e02c      	b.n	8007e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	623b      	str	r3, [r7, #32]
          break;
 8007dde:	e029      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	3304      	adds	r3, #4
 8007de6:	623b      	str	r3, [r7, #32]
          break;
 8007de8:	e024      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	3308      	adds	r3, #8
 8007df0:	623b      	str	r3, [r7, #32]
          break;
 8007df2:	e01f      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	623b      	str	r3, [r7, #32]
          break;
 8007dfc:	e01a      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007e06:	2304      	movs	r3, #4
 8007e08:	623b      	str	r3, [r7, #32]
          break;
 8007e0a:	e013      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d105      	bne.n	8007e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e14:	2308      	movs	r3, #8
 8007e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	611a      	str	r2, [r3, #16]
          break;
 8007e1e:	e009      	b.n	8007e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e20:	2308      	movs	r3, #8
 8007e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	615a      	str	r2, [r3, #20]
          break;
 8007e2a:	e003      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	623b      	str	r3, [r7, #32]
          break;
 8007e30:	e000      	b.n	8007e34 <HAL_GPIO_Init+0x130>
          break;
 8007e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	2bff      	cmp	r3, #255	; 0xff
 8007e38:	d801      	bhi.n	8007e3e <HAL_GPIO_Init+0x13a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	e001      	b.n	8007e42 <HAL_GPIO_Init+0x13e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2bff      	cmp	r3, #255	; 0xff
 8007e48:	d802      	bhi.n	8007e50 <HAL_GPIO_Init+0x14c>
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	e002      	b.n	8007e56 <HAL_GPIO_Init+0x152>
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	3b08      	subs	r3, #8
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	210f      	movs	r1, #15
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	fa01 f303 	lsl.w	r3, r1, r3
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	6a39      	ldr	r1, [r7, #32]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e70:	431a      	orrs	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80b1 	beq.w	8007fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e84:	4b4d      	ldr	r3, [pc, #308]	; (8007fbc <HAL_GPIO_Init+0x2b8>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	4a4c      	ldr	r2, [pc, #304]	; (8007fbc <HAL_GPIO_Init+0x2b8>)
 8007e8a:	f043 0301 	orr.w	r3, r3, #1
 8007e8e:	6193      	str	r3, [r2, #24]
 8007e90:	4b4a      	ldr	r3, [pc, #296]	; (8007fbc <HAL_GPIO_Init+0x2b8>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007e9c:	4a48      	ldr	r2, [pc, #288]	; (8007fc0 <HAL_GPIO_Init+0x2bc>)
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	089b      	lsrs	r3, r3, #2
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	220f      	movs	r2, #15
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a40      	ldr	r2, [pc, #256]	; (8007fc4 <HAL_GPIO_Init+0x2c0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d013      	beq.n	8007ef0 <HAL_GPIO_Init+0x1ec>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <HAL_GPIO_Init+0x2c4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00d      	beq.n	8007eec <HAL_GPIO_Init+0x1e8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a3e      	ldr	r2, [pc, #248]	; (8007fcc <HAL_GPIO_Init+0x2c8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d007      	beq.n	8007ee8 <HAL_GPIO_Init+0x1e4>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a3d      	ldr	r2, [pc, #244]	; (8007fd0 <HAL_GPIO_Init+0x2cc>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d101      	bne.n	8007ee4 <HAL_GPIO_Init+0x1e0>
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e006      	b.n	8007ef2 <HAL_GPIO_Init+0x1ee>
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	e004      	b.n	8007ef2 <HAL_GPIO_Init+0x1ee>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e002      	b.n	8007ef2 <HAL_GPIO_Init+0x1ee>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <HAL_GPIO_Init+0x1ee>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef4:	f002 0203 	and.w	r2, r2, #3
 8007ef8:	0092      	lsls	r2, r2, #2
 8007efa:	4093      	lsls	r3, r2
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007f02:	492f      	ldr	r1, [pc, #188]	; (8007fc0 <HAL_GPIO_Init+0x2bc>)
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	089b      	lsrs	r3, r3, #2
 8007f08:	3302      	adds	r3, #2
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007f1c:	4b2d      	ldr	r3, [pc, #180]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	492c      	ldr	r1, [pc, #176]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	600b      	str	r3, [r1, #0]
 8007f28:	e006      	b.n	8007f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007f2a:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	43db      	mvns	r3, r3
 8007f32:	4928      	ldr	r1, [pc, #160]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007f44:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	4922      	ldr	r1, [pc, #136]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	604b      	str	r3, [r1, #4]
 8007f50:	e006      	b.n	8007f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007f52:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	491e      	ldr	r1, [pc, #120]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	4918      	ldr	r1, [pc, #96]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	608b      	str	r3, [r1, #8]
 8007f78:	e006      	b.n	8007f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007f7a:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	43db      	mvns	r3, r3
 8007f82:	4914      	ldr	r1, [pc, #80]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d021      	beq.n	8007fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <HAL_GPIO_Init+0x2d0>)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60cb      	str	r3, [r1, #12]
 8007fa0:	e021      	b.n	8007fe6 <HAL_GPIO_Init+0x2e2>
 8007fa2:	bf00      	nop
 8007fa4:	10320000 	.word	0x10320000
 8007fa8:	10310000 	.word	0x10310000
 8007fac:	10220000 	.word	0x10220000
 8007fb0:	10210000 	.word	0x10210000
 8007fb4:	10120000 	.word	0x10120000
 8007fb8:	10110000 	.word	0x10110000
 8007fbc:	40021000 	.word	0x40021000
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40010800 	.word	0x40010800
 8007fc8:	40010c00 	.word	0x40010c00
 8007fcc:	40011000 	.word	0x40011000
 8007fd0:	40011400 	.word	0x40011400
 8007fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <HAL_GPIO_Init+0x304>)
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	4909      	ldr	r1, [pc, #36]	; (8008008 <HAL_GPIO_Init+0x304>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	3301      	adds	r3, #1
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f47f ae8e 	bne.w	8007d18 <HAL_GPIO_Init+0x14>
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	372c      	adds	r7, #44	; 0x2c
 8008002:	46bd      	mov	sp, r7
 8008004:	bc80      	pop	{r7}
 8008006:	4770      	bx	lr
 8008008:	40010400 	.word	0x40010400

0800800c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
 8008018:	4613      	mov	r3, r2
 800801a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800801c:	787b      	ldrb	r3, [r7, #1]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008022:	887a      	ldrh	r2, [r7, #2]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008028:	e003      	b.n	8008032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	041a      	lsls	r2, r3, #16
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	611a      	str	r2, [r3, #16]
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008046:	4b08      	ldr	r3, [pc, #32]	; (8008068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	4013      	ands	r3, r2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d006      	beq.n	8008060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008052:	4a05      	ldr	r2, [pc, #20]	; (8008068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008058:	88fb      	ldrh	r3, [r7, #6]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f806 	bl	800806c <HAL_GPIO_EXTI_Callback>
  }
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40010400 	.word	0x40010400

0800806c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e26c      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8087 	beq.w	80081ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080a0:	4b92      	ldr	r3, [pc, #584]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 030c 	and.w	r3, r3, #12
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d00c      	beq.n	80080c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80080ac:	4b8f      	ldr	r3, [pc, #572]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 030c 	and.w	r3, r3, #12
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d112      	bne.n	80080de <HAL_RCC_OscConfig+0x5e>
 80080b8:	4b8c      	ldr	r3, [pc, #560]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c4:	d10b      	bne.n	80080de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c6:	4b89      	ldr	r3, [pc, #548]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d06c      	beq.n	80081ac <HAL_RCC_OscConfig+0x12c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d168      	bne.n	80081ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e246      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e6:	d106      	bne.n	80080f6 <HAL_RCC_OscConfig+0x76>
 80080e8:	4b80      	ldr	r3, [pc, #512]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a7f      	ldr	r2, [pc, #508]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80080ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e02e      	b.n	8008154 <HAL_RCC_OscConfig+0xd4>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10c      	bne.n	8008118 <HAL_RCC_OscConfig+0x98>
 80080fe:	4b7b      	ldr	r3, [pc, #492]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a7a      	ldr	r2, [pc, #488]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	4b78      	ldr	r3, [pc, #480]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a77      	ldr	r2, [pc, #476]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e01d      	b.n	8008154 <HAL_RCC_OscConfig+0xd4>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008120:	d10c      	bne.n	800813c <HAL_RCC_OscConfig+0xbc>
 8008122:	4b72      	ldr	r3, [pc, #456]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a71      	ldr	r2, [pc, #452]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b6f      	ldr	r3, [pc, #444]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a6e      	ldr	r2, [pc, #440]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008138:	6013      	str	r3, [r2, #0]
 800813a:	e00b      	b.n	8008154 <HAL_RCC_OscConfig+0xd4>
 800813c:	4b6b      	ldr	r3, [pc, #428]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a6a      	ldr	r2, [pc, #424]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4b68      	ldr	r3, [pc, #416]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a67      	ldr	r2, [pc, #412]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 800814e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d013      	beq.n	8008184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800815c:	f7fe fd40 	bl	8006be0 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008164:	f7fe fd3c 	bl	8006be0 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b64      	cmp	r3, #100	; 0x64
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e1fa      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008176:	4b5d      	ldr	r3, [pc, #372]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCC_OscConfig+0xe4>
 8008182:	e014      	b.n	80081ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008184:	f7fe fd2c 	bl	8006be0 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800818c:	f7fe fd28 	bl	8006be0 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b64      	cmp	r3, #100	; 0x64
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e1e6      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800819e:	4b53      	ldr	r3, [pc, #332]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <HAL_RCC_OscConfig+0x10c>
 80081aa:	e000      	b.n	80081ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d063      	beq.n	8008282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80081ba:	4b4c      	ldr	r3, [pc, #304]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80081c6:	4b49      	ldr	r3, [pc, #292]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f003 030c 	and.w	r3, r3, #12
 80081ce:	2b08      	cmp	r3, #8
 80081d0:	d11c      	bne.n	800820c <HAL_RCC_OscConfig+0x18c>
 80081d2:	4b46      	ldr	r3, [pc, #280]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d116      	bne.n	800820c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081de:	4b43      	ldr	r3, [pc, #268]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_RCC_OscConfig+0x176>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d001      	beq.n	80081f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e1ba      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f6:	4b3d      	ldr	r3, [pc, #244]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4939      	ldr	r1, [pc, #228]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008206:	4313      	orrs	r3, r2
 8008208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800820a:	e03a      	b.n	8008282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d020      	beq.n	8008256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008214:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800821a:	f7fe fce1 	bl	8006be0 <HAL_GetTick>
 800821e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008220:	e008      	b.n	8008234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008222:	f7fe fcdd 	bl	8006be0 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e19b      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f0      	beq.n	8008222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008240:	4b2a      	ldr	r3, [pc, #168]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4927      	ldr	r1, [pc, #156]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008250:	4313      	orrs	r3, r2
 8008252:	600b      	str	r3, [r1, #0]
 8008254:	e015      	b.n	8008282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008256:	4b26      	ldr	r3, [pc, #152]	; (80082f0 <HAL_RCC_OscConfig+0x270>)
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800825c:	f7fe fcc0 	bl	8006be0 <HAL_GetTick>
 8008260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008262:	e008      	b.n	8008276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008264:	f7fe fcbc 	bl	8006be0 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d901      	bls.n	8008276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e17a      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f0      	bne.n	8008264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d03a      	beq.n	8008304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d019      	beq.n	80082ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008296:	4b17      	ldr	r3, [pc, #92]	; (80082f4 <HAL_RCC_OscConfig+0x274>)
 8008298:	2201      	movs	r2, #1
 800829a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829c:	f7fe fca0 	bl	8006be0 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a4:	f7fe fc9c 	bl	8006be0 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e15a      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <HAL_RCC_OscConfig+0x26c>)
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80082c2:	2001      	movs	r0, #1
 80082c4:	f000 fad8 	bl	8008878 <RCC_Delay>
 80082c8:	e01c      	b.n	8008304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <HAL_RCC_OscConfig+0x274>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d0:	f7fe fc86 	bl	8006be0 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d6:	e00f      	b.n	80082f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082d8:	f7fe fc82 	bl	8006be0 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d908      	bls.n	80082f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e140      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
 80082ea:	bf00      	nop
 80082ec:	40021000 	.word	0x40021000
 80082f0:	42420000 	.word	0x42420000
 80082f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082f8:	4b9e      	ldr	r3, [pc, #632]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e9      	bne.n	80082d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0304 	and.w	r3, r3, #4
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80a6 	beq.w	800845e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008316:	4b97      	ldr	r3, [pc, #604]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10d      	bne.n	800833e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008322:	4b94      	ldr	r3, [pc, #592]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4a93      	ldr	r2, [pc, #588]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800832c:	61d3      	str	r3, [r2, #28]
 800832e:	4b91      	ldr	r3, [pc, #580]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008336:	60bb      	str	r3, [r7, #8]
 8008338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800833a:	2301      	movs	r3, #1
 800833c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833e:	4b8e      	ldr	r3, [pc, #568]	; (8008578 <HAL_RCC_OscConfig+0x4f8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008346:	2b00      	cmp	r3, #0
 8008348:	d118      	bne.n	800837c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800834a:	4b8b      	ldr	r3, [pc, #556]	; (8008578 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a8a      	ldr	r2, [pc, #552]	; (8008578 <HAL_RCC_OscConfig+0x4f8>)
 8008350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008356:	f7fe fc43 	bl	8006be0 <HAL_GetTick>
 800835a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800835e:	f7fe fc3f 	bl	8006be0 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b64      	cmp	r3, #100	; 0x64
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e0fd      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008370:	4b81      	ldr	r3, [pc, #516]	; (8008578 <HAL_RCC_OscConfig+0x4f8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0f0      	beq.n	800835e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d106      	bne.n	8008392 <HAL_RCC_OscConfig+0x312>
 8008384:	4b7b      	ldr	r3, [pc, #492]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	4a7a      	ldr	r2, [pc, #488]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	6213      	str	r3, [r2, #32]
 8008390:	e02d      	b.n	80083ee <HAL_RCC_OscConfig+0x36e>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10c      	bne.n	80083b4 <HAL_RCC_OscConfig+0x334>
 800839a:	4b76      	ldr	r3, [pc, #472]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	4a75      	ldr	r2, [pc, #468]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	6213      	str	r3, [r2, #32]
 80083a6:	4b73      	ldr	r3, [pc, #460]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	4a72      	ldr	r2, [pc, #456]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083ac:	f023 0304 	bic.w	r3, r3, #4
 80083b0:	6213      	str	r3, [r2, #32]
 80083b2:	e01c      	b.n	80083ee <HAL_RCC_OscConfig+0x36e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	d10c      	bne.n	80083d6 <HAL_RCC_OscConfig+0x356>
 80083bc:	4b6d      	ldr	r3, [pc, #436]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	4a6c      	ldr	r2, [pc, #432]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083c2:	f043 0304 	orr.w	r3, r3, #4
 80083c6:	6213      	str	r3, [r2, #32]
 80083c8:	4b6a      	ldr	r3, [pc, #424]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	4a69      	ldr	r2, [pc, #420]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	6213      	str	r3, [r2, #32]
 80083d4:	e00b      	b.n	80083ee <HAL_RCC_OscConfig+0x36e>
 80083d6:	4b67      	ldr	r3, [pc, #412]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	4a66      	ldr	r2, [pc, #408]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	6213      	str	r3, [r2, #32]
 80083e2:	4b64      	ldr	r3, [pc, #400]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	4a63      	ldr	r2, [pc, #396]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80083e8:	f023 0304 	bic.w	r3, r3, #4
 80083ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d015      	beq.n	8008422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083f6:	f7fe fbf3 	bl	8006be0 <HAL_GetTick>
 80083fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fc:	e00a      	b.n	8008414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083fe:	f7fe fbef 	bl	8006be0 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	f241 3288 	movw	r2, #5000	; 0x1388
 800840c:	4293      	cmp	r3, r2
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e0ab      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008414:	4b57      	ldr	r3, [pc, #348]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0ee      	beq.n	80083fe <HAL_RCC_OscConfig+0x37e>
 8008420:	e014      	b.n	800844c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008422:	f7fe fbdd 	bl	8006be0 <HAL_GetTick>
 8008426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008428:	e00a      	b.n	8008440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842a:	f7fe fbd9 	bl	8006be0 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f241 3288 	movw	r2, #5000	; 0x1388
 8008438:	4293      	cmp	r3, r2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e095      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008440:	4b4c      	ldr	r3, [pc, #304]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1ee      	bne.n	800842a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d105      	bne.n	800845e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008452:	4b48      	ldr	r3, [pc, #288]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	4a47      	ldr	r2, [pc, #284]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800845c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8081 	beq.w	800856a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008468:	4b42      	ldr	r3, [pc, #264]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 030c 	and.w	r3, r3, #12
 8008470:	2b08      	cmp	r3, #8
 8008472:	d061      	beq.n	8008538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d146      	bne.n	800850a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b3f      	ldr	r3, [pc, #252]	; (800857c <HAL_RCC_OscConfig+0x4fc>)
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008482:	f7fe fbad 	bl	8006be0 <HAL_GetTick>
 8008486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008488:	e008      	b.n	800849c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800848a:	f7fe fba9 	bl	8006be0 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e067      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800849c:	4b35      	ldr	r3, [pc, #212]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1f0      	bne.n	800848a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b0:	d108      	bne.n	80084c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80084b2:	4b30      	ldr	r3, [pc, #192]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	492d      	ldr	r1, [pc, #180]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084c4:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a19      	ldr	r1, [r3, #32]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	430b      	orrs	r3, r1
 80084d6:	4927      	ldr	r1, [pc, #156]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084dc:	4b27      	ldr	r3, [pc, #156]	; (800857c <HAL_RCC_OscConfig+0x4fc>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e2:	f7fe fb7d 	bl	8006be0 <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084ea:	f7fe fb79 	bl	8006be0 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e037      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084fc:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0f0      	beq.n	80084ea <HAL_RCC_OscConfig+0x46a>
 8008508:	e02f      	b.n	800856a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800850a:	4b1c      	ldr	r3, [pc, #112]	; (800857c <HAL_RCC_OscConfig+0x4fc>)
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008510:	f7fe fb66 	bl	8006be0 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008518:	f7fe fb62 	bl	8006be0 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e020      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f0      	bne.n	8008518 <HAL_RCC_OscConfig+0x498>
 8008536:	e018      	b.n	800856a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d101      	bne.n	8008544 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e013      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_RCC_OscConfig+0x4f4>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	429a      	cmp	r2, r3
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d001      	beq.n	800856a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40021000 	.word	0x40021000
 8008578:	40007000 	.word	0x40007000
 800857c:	42420060 	.word	0x42420060

08008580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e0d0      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008594:	4b6a      	ldr	r3, [pc, #424]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d910      	bls.n	80085c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085a2:	4b67      	ldr	r3, [pc, #412]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f023 0207 	bic.w	r2, r3, #7
 80085aa:	4965      	ldr	r1, [pc, #404]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b2:	4b63      	ldr	r3, [pc, #396]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d001      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0b8      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d020      	beq.n	8008612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085dc:	4b59      	ldr	r3, [pc, #356]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a58      	ldr	r2, [pc, #352]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80085e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0308 	and.w	r3, r3, #8
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085f4:	4b53      	ldr	r3, [pc, #332]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4a52      	ldr	r2, [pc, #328]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80085fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80085fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008600:	4b50      	ldr	r3, [pc, #320]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	494d      	ldr	r1, [pc, #308]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 800860e:	4313      	orrs	r3, r2
 8008610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d040      	beq.n	80086a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d107      	bne.n	8008636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008626:	4b47      	ldr	r3, [pc, #284]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d115      	bne.n	800865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e07f      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d107      	bne.n	800864e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863e:	4b41      	ldr	r3, [pc, #260]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d109      	bne.n	800865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e073      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800864e:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e06b      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800865e:	4b39      	ldr	r3, [pc, #228]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f023 0203 	bic.w	r2, r3, #3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4936      	ldr	r1, [pc, #216]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 800866c:	4313      	orrs	r3, r2
 800866e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008670:	f7fe fab6 	bl	8006be0 <HAL_GetTick>
 8008674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008676:	e00a      	b.n	800868e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008678:	f7fe fab2 	bl	8006be0 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	f241 3288 	movw	r2, #5000	; 0x1388
 8008686:	4293      	cmp	r3, r2
 8008688:	d901      	bls.n	800868e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e053      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868e:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f003 020c 	and.w	r2, r3, #12
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	429a      	cmp	r2, r3
 800869e:	d1eb      	bne.n	8008678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086a0:	4b27      	ldr	r3, [pc, #156]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d210      	bcs.n	80086d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ae:	4b24      	ldr	r3, [pc, #144]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f023 0207 	bic.w	r2, r3, #7
 80086b6:	4922      	ldr	r1, [pc, #136]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086be:	4b20      	ldr	r3, [pc, #128]	; (8008740 <HAL_RCC_ClockConfig+0x1c0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0307 	and.w	r3, r3, #7
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d001      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e032      	b.n	8008736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d008      	beq.n	80086ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086dc:	4b19      	ldr	r3, [pc, #100]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	4916      	ldr	r1, [pc, #88]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	490e      	ldr	r1, [pc, #56]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 800870a:	4313      	orrs	r3, r2
 800870c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800870e:	f000 f821 	bl	8008754 <HAL_RCC_GetSysClockFreq>
 8008712:	4602      	mov	r2, r0
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_RCC_ClockConfig+0x1c4>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	091b      	lsrs	r3, r3, #4
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	490a      	ldr	r1, [pc, #40]	; (8008748 <HAL_RCC_ClockConfig+0x1c8>)
 8008720:	5ccb      	ldrb	r3, [r1, r3]
 8008722:	fa22 f303 	lsr.w	r3, r2, r3
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <HAL_RCC_ClockConfig+0x1cc>)
 8008728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <HAL_RCC_ClockConfig+0x1d0>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fa14 	bl	8006b5c <HAL_InitTick>

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	40022000 	.word	0x40022000
 8008744:	40021000 	.word	0x40021000
 8008748:	0800b4b4 	.word	0x0800b4b4
 800874c:	20000004 	.word	0x20000004
 8008750:	20000008 	.word	0x20000008

08008754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008754:	b490      	push	{r4, r7}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800875a:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <HAL_RCC_GetSysClockFreq+0xb0>)
 800875c:	1d3c      	adds	r4, r7, #4
 800875e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008764:	f240 2301 	movw	r3, #513	; 0x201
 8008768:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	2300      	movs	r3, #0
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	2300      	movs	r3, #0
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800877e:	4b22      	ldr	r3, [pc, #136]	; (8008808 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	f003 030c 	and.w	r3, r3, #12
 800878a:	2b04      	cmp	r3, #4
 800878c:	d002      	beq.n	8008794 <HAL_RCC_GetSysClockFreq+0x40>
 800878e:	2b08      	cmp	r3, #8
 8008790:	d003      	beq.n	800879a <HAL_RCC_GetSysClockFreq+0x46>
 8008792:	e02d      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008794:	4b1d      	ldr	r3, [pc, #116]	; (800880c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008796:	623b      	str	r3, [r7, #32]
      break;
 8008798:	e02d      	b.n	80087f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	0c9b      	lsrs	r3, r3, #18
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087a6:	4413      	add	r3, r2
 80087a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80087ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d013      	beq.n	80087e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80087b8:	4b13      	ldr	r3, [pc, #76]	; (8008808 <HAL_RCC_GetSysClockFreq+0xb4>)
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	0c5b      	lsrs	r3, r3, #17
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087c6:	4413      	add	r3, r2
 80087c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80087cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	4a0e      	ldr	r2, [pc, #56]	; (800880c <HAL_RCC_GetSysClockFreq+0xb8>)
 80087d2:	fb02 f203 	mul.w	r2, r2, r3
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24
 80087de:	e004      	b.n	80087ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	4a0b      	ldr	r2, [pc, #44]	; (8008810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087e4:	fb02 f303 	mul.w	r3, r2, r3
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	623b      	str	r3, [r7, #32]
      break;
 80087ee:	e002      	b.n	80087f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <HAL_RCC_GetSysClockFreq+0xb8>)
 80087f2:	623b      	str	r3, [r7, #32]
      break;
 80087f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087f6:	6a3b      	ldr	r3, [r7, #32]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3728      	adds	r7, #40	; 0x28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc90      	pop	{r4, r7}
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	0800b494 	.word	0x0800b494
 8008808:	40021000 	.word	0x40021000
 800880c:	007a1200 	.word	0x007a1200
 8008810:	003d0900 	.word	0x003d0900

08008814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <HAL_RCC_GetHCLKFreq+0x10>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr
 8008824:	20000004 	.word	0x20000004

08008828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800882c:	f7ff fff2 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 8008830:	4602      	mov	r2, r0
 8008832:	4b05      	ldr	r3, [pc, #20]	; (8008848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	0a1b      	lsrs	r3, r3, #8
 8008838:	f003 0307 	and.w	r3, r3, #7
 800883c:	4903      	ldr	r1, [pc, #12]	; (800884c <HAL_RCC_GetPCLK1Freq+0x24>)
 800883e:	5ccb      	ldrb	r3, [r1, r3]
 8008840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	bd80      	pop	{r7, pc}
 8008848:	40021000 	.word	0x40021000
 800884c:	0800b4c4 	.word	0x0800b4c4

08008850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008854:	f7ff ffde 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 8008858:	4602      	mov	r2, r0
 800885a:	4b05      	ldr	r3, [pc, #20]	; (8008870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	0adb      	lsrs	r3, r3, #11
 8008860:	f003 0307 	and.w	r3, r3, #7
 8008864:	4903      	ldr	r1, [pc, #12]	; (8008874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008866:	5ccb      	ldrb	r3, [r1, r3]
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800886c:	4618      	mov	r0, r3
 800886e:	bd80      	pop	{r7, pc}
 8008870:	40021000 	.word	0x40021000
 8008874:	0800b4c4 	.word	0x0800b4c4

08008878 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008880:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <RCC_Delay+0x34>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0a      	ldr	r2, [pc, #40]	; (80088b0 <RCC_Delay+0x38>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	0a5b      	lsrs	r3, r3, #9
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	fb02 f303 	mul.w	r3, r2, r3
 8008892:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008894:	bf00      	nop
  }
  while (Delay --);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1e5a      	subs	r2, r3, #1
 800889a:	60fa      	str	r2, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f9      	bne.n	8008894 <RCC_Delay+0x1c>
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	20000004 	.word	0x20000004
 80088b0:	10624dd3 	.word	0x10624dd3

080088b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d07d      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80088d0:	2300      	movs	r3, #0
 80088d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088d4:	4b4f      	ldr	r3, [pc, #316]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e0:	4b4c      	ldr	r3, [pc, #304]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	4a4b      	ldr	r2, [pc, #300]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ea:	61d3      	str	r3, [r2, #28]
 80088ec:	4b49      	ldr	r3, [pc, #292]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	60bb      	str	r3, [r7, #8]
 80088f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088fc:	4b46      	ldr	r3, [pc, #280]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008904:	2b00      	cmp	r3, #0
 8008906:	d118      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008908:	4b43      	ldr	r3, [pc, #268]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a42      	ldr	r2, [pc, #264]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800890e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008914:	f7fe f964 	bl	8006be0 <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800891a:	e008      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800891c:	f7fe f960 	bl	8006be0 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b64      	cmp	r3, #100	; 0x64
 8008928:	d901      	bls.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e06d      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892e:	4b3a      	ldr	r3, [pc, #232]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800893a:	4b36      	ldr	r3, [pc, #216]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008942:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d02e      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	429a      	cmp	r2, r3
 8008956:	d027      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008958:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008960:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008962:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008968:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800896e:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d014      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897e:	f7fe f92f 	bl	8006be0 <HAL_GetTick>
 8008982:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008984:	e00a      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008986:	f7fe f92b 	bl	8006be0 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f241 3288 	movw	r2, #5000	; 0x1388
 8008994:	4293      	cmp	r3, r2
 8008996:	d901      	bls.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e036      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800899c:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0ee      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089a8:	4b1a      	ldr	r3, [pc, #104]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4917      	ldr	r1, [pc, #92]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d105      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089c0:	4b14      	ldr	r3, [pc, #80]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	4a13      	ldr	r2, [pc, #76]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	490b      	ldr	r1, [pc, #44]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d008      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	4904      	ldr	r1, [pc, #16]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40021000 	.word	0x40021000
 8008a18:	40007000 	.word	0x40007000
 8008a1c:	42420440 	.word	0x42420440

08008a20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b08d      	sub	sp, #52	; 0x34
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008a28:	4b5a      	ldr	r3, [pc, #360]	; (8008b94 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8008a2a:	f107 040c 	add.w	r4, r7, #12
 8008a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008a34:	f240 2301 	movw	r3, #513	; 0x201
 8008a38:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3e:	2300      	movs	r3, #0
 8008a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a42:	2300      	movs	r3, #0
 8008a44:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b10      	cmp	r3, #16
 8008a52:	d00a      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b10      	cmp	r3, #16
 8008a58:	f200 8091 	bhi.w	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d04c      	beq.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d07c      	beq.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008a68:	e089      	b.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8008a6a:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008a70:	4b49      	ldr	r3, [pc, #292]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8082 	beq.w	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	0c9b      	lsrs	r3, r3, #18
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008a90:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d018      	beq.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008a9c:	4b3e      	ldr	r3, [pc, #248]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	0c5b      	lsrs	r3, r3, #17
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008aaa:	4413      	add	r3, r2
 8008aac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00d      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008abc:	4a37      	ldr	r2, [pc, #220]	; (8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008acc:	e004      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	4a33      	ldr	r2, [pc, #204]	; (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8008ad2:	fb02 f303 	mul.w	r3, r2, r3
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008ad8:	4b2f      	ldr	r3, [pc, #188]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ae4:	d102      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008aea:	e04a      	b.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	4a2c      	ldr	r2, [pc, #176]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008afa:	e042      	b.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8008afc:	4b26      	ldr	r3, [pc, #152]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0c:	d108      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008b18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b1e:	e01f      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2a:	d109      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008b38:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3e:	e00f      	b.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b4a:	d11c      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008b4c:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d016      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8008b58:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b5e:	e012      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008b60:	e011      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008b62:	f7ff fe75 	bl	8008850 <HAL_RCC_GetPCLK2Freq>
 8008b66:	4602      	mov	r2, r0
 8008b68:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	0b9b      	lsrs	r3, r3, #14
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	3301      	adds	r3, #1
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008b7c:	e004      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b7e:	bf00      	nop
 8008b80:	e002      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008b86:	bf00      	nop
    }
  }
  return (frequency);
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3734      	adds	r7, #52	; 0x34
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd90      	pop	{r4, r7, pc}
 8008b92:	bf00      	nop
 8008b94:	0800b4a4 	.word	0x0800b4a4
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	007a1200 	.word	0x007a1200
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	aaaaaaab 	.word	0xaaaaaaab

08008ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e041      	b.n	8008c3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d106      	bne.n	8008bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fd fdfe 	bl	80067d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f000 fa44 	bl	8009074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e041      	b.n	8008cdc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f839 	bl	8008ce4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f000 f9f5 	bl	8009074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr
	...

08008cf8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d109      	bne.n	8008d1c <HAL_TIM_OC_Start+0x24>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	bf14      	ite	ne
 8008d14:	2301      	movne	r3, #1
 8008d16:	2300      	moveq	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	e022      	b.n	8008d62 <HAL_TIM_OC_Start+0x6a>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d109      	bne.n	8008d36 <HAL_TIM_OC_Start+0x3e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	bf14      	ite	ne
 8008d2e:	2301      	movne	r3, #1
 8008d30:	2300      	moveq	r3, #0
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	e015      	b.n	8008d62 <HAL_TIM_OC_Start+0x6a>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d109      	bne.n	8008d50 <HAL_TIM_OC_Start+0x58>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	bf14      	ite	ne
 8008d48:	2301      	movne	r3, #1
 8008d4a:	2300      	moveq	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	e008      	b.n	8008d62 <HAL_TIM_OC_Start+0x6a>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e05e      	b.n	8008e28 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <HAL_TIM_OC_Start+0x82>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d78:	e013      	b.n	8008da2 <HAL_TIM_OC_Start+0xaa>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d104      	bne.n	8008d8a <HAL_TIM_OC_Start+0x92>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d88:	e00b      	b.n	8008da2 <HAL_TIM_OC_Start+0xaa>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d104      	bne.n	8008d9a <HAL_TIM_OC_Start+0xa2>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d98:	e003      	b.n	8008da2 <HAL_TIM_OC_Start+0xaa>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2202      	movs	r2, #2
 8008d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2201      	movs	r2, #1
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fbe2 	bl	8009574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a1e      	ldr	r2, [pc, #120]	; (8008e30 <HAL_TIM_OC_Start+0x138>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d107      	bne.n	8008dca <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a18      	ldr	r2, [pc, #96]	; (8008e30 <HAL_TIM_OC_Start+0x138>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00e      	beq.n	8008df2 <HAL_TIM_OC_Start+0xfa>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ddc:	d009      	beq.n	8008df2 <HAL_TIM_OC_Start+0xfa>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a14      	ldr	r2, [pc, #80]	; (8008e34 <HAL_TIM_OC_Start+0x13c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d004      	beq.n	8008df2 <HAL_TIM_OC_Start+0xfa>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a12      	ldr	r2, [pc, #72]	; (8008e38 <HAL_TIM_OC_Start+0x140>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d111      	bne.n	8008e16 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f003 0307 	and.w	r3, r3, #7
 8008dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b06      	cmp	r3, #6
 8008e02:	d010      	beq.n	8008e26 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
 8008e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e14:	e007      	b.n	8008e26 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40012c00 	.word	0x40012c00
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800

08008e3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e046      	b.n	8008ee4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b0c      	cmp	r3, #12
 8008e62:	d839      	bhi.n	8008ed8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008e64:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008ea1 	.word	0x08008ea1
 8008e70:	08008ed9 	.word	0x08008ed9
 8008e74:	08008ed9 	.word	0x08008ed9
 8008e78:	08008ed9 	.word	0x08008ed9
 8008e7c:	08008eaf 	.word	0x08008eaf
 8008e80:	08008ed9 	.word	0x08008ed9
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008ed9 	.word	0x08008ed9
 8008e8c:	08008ebd 	.word	0x08008ebd
 8008e90:	08008ed9 	.word	0x08008ed9
 8008e94:	08008ed9 	.word	0x08008ed9
 8008e98:	08008ed9 	.word	0x08008ed9
 8008e9c:	08008ecb 	.word	0x08008ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f946 	bl	8009138 <TIM_OC1_SetConfig>
      break;
 8008eac:	e015      	b.n	8008eda <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f9a5 	bl	8009204 <TIM_OC2_SetConfig>
      break;
 8008eba:	e00e      	b.n	8008eda <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fa08 	bl	80092d8 <TIM_OC3_SetConfig>
      break;
 8008ec8:	e007      	b.n	8008eda <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 fa6b 	bl	80093ac <TIM_OC4_SetConfig>
      break;
 8008ed6:	e000      	b.n	8008eda <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008ed8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_TIM_ConfigClockSource+0x18>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e0b3      	b.n	800906c <HAL_TIM_ConfigClockSource+0x180>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f3c:	d03e      	beq.n	8008fbc <HAL_TIM_ConfigClockSource+0xd0>
 8008f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f42:	f200 8087 	bhi.w	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f4a:	f000 8085 	beq.w	8009058 <HAL_TIM_ConfigClockSource+0x16c>
 8008f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f52:	d87f      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f54:	2b70      	cmp	r3, #112	; 0x70
 8008f56:	d01a      	beq.n	8008f8e <HAL_TIM_ConfigClockSource+0xa2>
 8008f58:	2b70      	cmp	r3, #112	; 0x70
 8008f5a:	d87b      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f5c:	2b60      	cmp	r3, #96	; 0x60
 8008f5e:	d050      	beq.n	8009002 <HAL_TIM_ConfigClockSource+0x116>
 8008f60:	2b60      	cmp	r3, #96	; 0x60
 8008f62:	d877      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f64:	2b50      	cmp	r3, #80	; 0x50
 8008f66:	d03c      	beq.n	8008fe2 <HAL_TIM_ConfigClockSource+0xf6>
 8008f68:	2b50      	cmp	r3, #80	; 0x50
 8008f6a:	d873      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d058      	beq.n	8009022 <HAL_TIM_ConfigClockSource+0x136>
 8008f70:	2b40      	cmp	r3, #64	; 0x40
 8008f72:	d86f      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f74:	2b30      	cmp	r3, #48	; 0x30
 8008f76:	d064      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x156>
 8008f78:	2b30      	cmp	r3, #48	; 0x30
 8008f7a:	d86b      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f7c:	2b20      	cmp	r3, #32
 8008f7e:	d060      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x156>
 8008f80:	2b20      	cmp	r3, #32
 8008f82:	d867      	bhi.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d05c      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x156>
 8008f88:	2b10      	cmp	r3, #16
 8008f8a:	d05a      	beq.n	8009042 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008f8c:	e062      	b.n	8009054 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6899      	ldr	r1, [r3, #8]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f000 faca 	bl	8009536 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	609a      	str	r2, [r3, #8]
      break;
 8008fba:	e04e      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6899      	ldr	r1, [r3, #8]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f000 fab3 	bl	8009536 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fde:	609a      	str	r2, [r3, #8]
      break;
 8008fe0:	e03b      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6859      	ldr	r1, [r3, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f000 fa2a 	bl	8009448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2150      	movs	r1, #80	; 0x50
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fa81 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8009000:	e02b      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	6859      	ldr	r1, [r3, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	461a      	mov	r2, r3
 8009010:	f000 fa48 	bl	80094a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2160      	movs	r1, #96	; 0x60
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fa71 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8009020:	e01b      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	f000 fa0a 	bl	8009448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2140      	movs	r1, #64	; 0x40
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fa61 	bl	8009502 <TIM_ITRx_SetConfig>
      break;
 8009040:	e00b      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4619      	mov	r1, r3
 800904c:	4610      	mov	r0, r2
 800904e:	f000 fa58 	bl	8009502 <TIM_ITRx_SetConfig>
        break;
 8009052:	e002      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009058:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a29      	ldr	r2, [pc, #164]	; (800912c <TIM_Base_SetConfig+0xb8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d00b      	beq.n	80090a4 <TIM_Base_SetConfig+0x30>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d007      	beq.n	80090a4 <TIM_Base_SetConfig+0x30>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a26      	ldr	r2, [pc, #152]	; (8009130 <TIM_Base_SetConfig+0xbc>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d003      	beq.n	80090a4 <TIM_Base_SetConfig+0x30>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a25      	ldr	r2, [pc, #148]	; (8009134 <TIM_Base_SetConfig+0xc0>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d108      	bne.n	80090b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a1c      	ldr	r2, [pc, #112]	; (800912c <TIM_Base_SetConfig+0xb8>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00b      	beq.n	80090d6 <TIM_Base_SetConfig+0x62>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c4:	d007      	beq.n	80090d6 <TIM_Base_SetConfig+0x62>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a19      	ldr	r2, [pc, #100]	; (8009130 <TIM_Base_SetConfig+0xbc>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d003      	beq.n	80090d6 <TIM_Base_SetConfig+0x62>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a18      	ldr	r2, [pc, #96]	; (8009134 <TIM_Base_SetConfig+0xc0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d108      	bne.n	80090e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a07      	ldr	r2, [pc, #28]	; (800912c <TIM_Base_SetConfig+0xb8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d103      	bne.n	800911c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	615a      	str	r2, [r3, #20]
}
 8009122:	bf00      	nop
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	bc80      	pop	{r7}
 800912a:	4770      	bx	lr
 800912c:	40012c00 	.word	0x40012c00
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800

08009138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f023 0201 	bic.w	r2, r3, #1
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f023 0302 	bic.w	r3, r3, #2
 8009180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <TIM_OC1_SetConfig+0xc8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d10c      	bne.n	80091ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f023 0308 	bic.w	r3, r3, #8
 800919a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f023 0304 	bic.w	r3, r3, #4
 80091ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a13      	ldr	r2, [pc, #76]	; (8009200 <TIM_OC1_SetConfig+0xc8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d111      	bne.n	80091da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	621a      	str	r2, [r3, #32]
}
 80091f4:	bf00      	nop
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bc80      	pop	{r7}
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40012c00 	.word	0x40012c00

08009204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	f023 0210 	bic.w	r2, r3, #16
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 0320 	bic.w	r3, r3, #32
 800924e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	4313      	orrs	r3, r2
 800925a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <TIM_OC2_SetConfig+0xd0>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d10d      	bne.n	8009280 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800926a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	011b      	lsls	r3, r3, #4
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	4313      	orrs	r3, r2
 8009276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800927e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a14      	ldr	r2, [pc, #80]	; (80092d4 <TIM_OC2_SetConfig+0xd0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d113      	bne.n	80092b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800928e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	621a      	str	r2, [r3, #32]
}
 80092ca:	bf00      	nop
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bc80      	pop	{r7}
 80092d2:	4770      	bx	lr
 80092d4:	40012c00 	.word	0x40012c00

080092d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	021b      	lsls	r3, r3, #8
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <TIM_OC3_SetConfig+0xd0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d10d      	bne.n	8009352 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800933c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a14      	ldr	r2, [pc, #80]	; (80093a8 <TIM_OC3_SetConfig+0xd0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d113      	bne.n	8009382 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	4313      	orrs	r3, r2
 8009374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	621a      	str	r2, [r3, #32]
}
 800939c:	bf00      	nop
 800939e:	371c      	adds	r7, #28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bc80      	pop	{r7}
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	40012c00 	.word	0x40012c00

080093ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	031b      	lsls	r3, r3, #12
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a0f      	ldr	r2, [pc, #60]	; (8009444 <TIM_OC4_SetConfig+0x98>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d109      	bne.n	8009420 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	019b      	lsls	r3, r3, #6
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	621a      	str	r2, [r3, #32]
}
 800943a:	bf00      	nop
 800943c:	371c      	adds	r7, #28
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr
 8009444:	40012c00 	.word	0x40012c00

08009448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	f023 0201 	bic.w	r2, r3, #1
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4313      	orrs	r3, r2
 800947c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 030a 	bic.w	r3, r3, #10
 8009484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4313      	orrs	r3, r2
 800948c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	621a      	str	r2, [r3, #32]
}
 800949a:	bf00      	nop
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	bc80      	pop	{r7}
 80094a2:	4770      	bx	lr

080094a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	f023 0210 	bic.w	r2, r3, #16
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	031b      	lsls	r3, r3, #12
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	621a      	str	r2, [r3, #32]
}
 80094f8:	bf00      	nop
 80094fa:	371c      	adds	r7, #28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr

08009502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	f043 0307 	orr.w	r3, r3, #7
 8009524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	609a      	str	r2, [r3, #8]
}
 800952c:	bf00      	nop
 800952e:	3714      	adds	r7, #20
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr

08009536 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009536:	b480      	push	{r7}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
 8009542:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009550:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	021a      	lsls	r2, r3, #8
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	431a      	orrs	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4313      	orrs	r3, r2
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4313      	orrs	r3, r2
 8009562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	609a      	str	r2, [r3, #8]
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f003 031f 	and.w	r3, r3, #31
 8009586:	2201      	movs	r2, #1
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	43db      	mvns	r3, r3
 8009596:	401a      	ands	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a1a      	ldr	r2, [r3, #32]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f003 031f 	and.w	r3, r3, #31
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ac:	431a      	orrs	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	621a      	str	r2, [r3, #32]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e046      	b.n	8009662 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a16      	ldr	r2, [pc, #88]	; (800966c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00e      	beq.n	8009636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d009      	beq.n	8009636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a12      	ldr	r2, [pc, #72]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d004      	beq.n	8009636 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a10      	ldr	r2, [pc, #64]	; (8009674 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d10c      	bne.n	8009650 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800963c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	4313      	orrs	r3, r2
 8009646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr
 800966c:	40012c00 	.word	0x40012c00
 8009670:	40000400 	.word	0x40000400
 8009674:	40000800 	.word	0x40000800

08009678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009690:	2302      	movs	r3, #2
 8009692:	e03d      	b.n	8009710 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr

0800971a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b082      	sub	sp, #8
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e03f      	b.n	80097ac <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7fd f863 	bl	800680c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2224      	movs	r2, #36	; 0x24
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800975c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fd26 	bl	800a1b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009772:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009782:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68da      	ldr	r2, [r3, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009792:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	; 0x28
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	4613      	mov	r3, r2
 80097c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d17c      	bne.n	80098ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_UART_Transmit+0x2c>
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e075      	b.n	80098d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <HAL_UART_Transmit+0x3e>
 80097ee:	2302      	movs	r3, #2
 80097f0:	e06e      	b.n	80098d0 <HAL_UART_Transmit+0x11c>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2221      	movs	r2, #33	; 0x21
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009808:	f7fd f9ea 	bl	8006be0 <HAL_GetTick>
 800980c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	88fa      	ldrh	r2, [r7, #6]
 8009812:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	88fa      	ldrh	r2, [r7, #6]
 8009818:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009822:	d108      	bne.n	8009836 <HAL_UART_Transmit+0x82>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d104      	bne.n	8009836 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800982c:	2300      	movs	r3, #0
 800982e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	e003      	b.n	800983e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009846:	e02a      	b.n	800989e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2200      	movs	r2, #0
 8009850:	2180      	movs	r1, #128	; 0x80
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fad9 	bl	8009e0a <UART_WaitOnFlagUntilTimeout>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e036      	b.n	80098d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	461a      	mov	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009876:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	3302      	adds	r3, #2
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	e007      	b.n	8009890 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	781a      	ldrb	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	3301      	adds	r3, #1
 800988e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1cf      	bne.n	8009848 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2200      	movs	r2, #0
 80098b0:	2140      	movs	r1, #64	; 0x40
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 faa9 	bl	8009e0a <UART_WaitOnFlagUntilTimeout>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e006      	b.n	80098d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80098ce:	2302      	movs	r3, #2
  }
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08a      	sub	sp, #40	; 0x28
 80098dc:	af02      	add	r7, sp, #8
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	f040 808c 	bne.w	8009a12 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <HAL_UART_Receive+0x2e>
 8009900:	88fb      	ldrh	r3, [r7, #6]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e084      	b.n	8009a14 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_UART_Receive+0x40>
 8009914:	2302      	movs	r3, #2
 8009916:	e07d      	b.n	8009a14 <HAL_UART_Receive+0x13c>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2222      	movs	r2, #34	; 0x22
 800992a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009934:	f7fd f954 	bl	8006be0 <HAL_GetTick>
 8009938:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	88fa      	ldrh	r2, [r7, #6]
 800993e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800994e:	d108      	bne.n	8009962 <HAL_UART_Receive+0x8a>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d104      	bne.n	8009962 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	e003      	b.n	800996a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009972:	e043      	b.n	80099fc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2200      	movs	r2, #0
 800997c:	2120      	movs	r1, #32
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fa43 	bl	8009e0a <UART_WaitOnFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e042      	b.n	8009a14 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10c      	bne.n	80099ae <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	b29b      	uxth	r3, r3
 800999c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	3302      	adds	r3, #2
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e01f      	b.n	80099ee <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b6:	d007      	beq.n	80099c8 <HAL_UART_Receive+0xf0>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <HAL_UART_Receive+0xfe>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	701a      	strb	r2, [r3, #0]
 80099d4:	e008      	b.n	80099e8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	3301      	adds	r3, #1
 80099ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1b6      	bne.n	8009974 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d11d      	bne.n	8009a72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d002      	beq.n	8009a42 <HAL_UART_Receive_IT+0x26>
 8009a3c:	88fb      	ldrh	r3, [r7, #6]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e016      	b.n	8009a74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_UART_Receive_IT+0x38>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e00f      	b.n	8009a74 <HAL_UART_Receive_IT+0x58>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	461a      	mov	r2, r3
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 fa18 	bl	8009e9e <UART_Start_Receive_IT>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	e000      	b.n	8009a74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a72:	2302      	movs	r3, #2
  }
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	f003 030f 	and.w	r3, r3, #15
 8009aaa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10d      	bne.n	8009ace <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d008      	beq.n	8009ace <HAL_UART_IRQHandler+0x52>
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	f003 0320 	and.w	r3, r3, #32
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fac9 	bl	800a05e <UART_Receive_IT>
      return;
 8009acc:	e17b      	b.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80b1 	beq.w	8009c38 <HAL_UART_IRQHandler+0x1bc>
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d105      	bne.n	8009aec <HAL_UART_IRQHandler+0x70>
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80a6 	beq.w	8009c38 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <HAL_UART_IRQHandler+0x90>
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b04:	f043 0201 	orr.w	r2, r3, #1
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <HAL_UART_IRQHandler+0xb0>
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	f043 0202 	orr.w	r2, r3, #2
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <HAL_UART_IRQHandler+0xd0>
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	f043 0204 	orr.w	r2, r3, #4
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00f      	beq.n	8009b76 <HAL_UART_IRQHandler+0xfa>
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <HAL_UART_IRQHandler+0xee>
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d005      	beq.n	8009b76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f043 0208 	orr.w	r2, r3, #8
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 811e 	beq.w	8009dbc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d007      	beq.n	8009b9a <HAL_UART_IRQHandler+0x11e>
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa62 	bl	800a05e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bf14      	ite	ne
 8009ba8:	2301      	movne	r3, #1
 8009baa:	2300      	moveq	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <HAL_UART_IRQHandler+0x146>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d031      	beq.n	8009c26 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9a4 	bl	8009f10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d023      	beq.n	8009c1e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	695a      	ldr	r2, [r3, #20]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009be4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d013      	beq.n	8009c16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	4a76      	ldr	r2, [pc, #472]	; (8009dcc <HAL_UART_IRQHandler+0x350>)
 8009bf4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fd fe0c 	bl	8007818 <HAL_DMA_Abort_IT>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d016      	beq.n	8009c34 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c10:	4610      	mov	r0, r2
 8009c12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c14:	e00e      	b.n	8009c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8e3 	bl	8009de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c1c:	e00a      	b.n	8009c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f8df 	bl	8009de2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	e006      	b.n	8009c34 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f8db 	bl	8009de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c32:	e0c3      	b.n	8009dbc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c34:	bf00      	nop
    return;
 8009c36:	e0c1      	b.n	8009dbc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	f040 80a1 	bne.w	8009d84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f000 809b 	beq.w	8009d84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8095 	beq.w	8009d84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
 8009c6e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d04e      	beq.n	8009d1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009c88:	8a3b      	ldrh	r3, [r7, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8098 	beq.w	8009dc0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c94:	8a3a      	ldrh	r2, [r7, #16]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	f080 8092 	bcs.w	8009dc0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	8a3a      	ldrh	r2, [r7, #16]
 8009ca0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d02b      	beq.n	8009d04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	695a      	ldr	r2, [r3, #20]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f022 0201 	bic.w	r2, r2, #1
 8009cca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695a      	ldr	r2, [r3, #20]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cda:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68da      	ldr	r2, [r3, #12]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0210 	bic.w	r2, r2, #16
 8009cf8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fd fd4f 	bl	80077a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 f86d 	bl	8009df4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009d1a:	e051      	b.n	8009dc0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d047      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009d34:	8a7b      	ldrh	r3, [r7, #18]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d044      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695a      	ldr	r2, [r3, #20]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0210 	bic.w	r2, r2, #16
 8009d76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d78:	8a7b      	ldrh	r3, [r7, #18]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f839 	bl	8009df4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009d82:	e01f      	b.n	8009dc4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d008      	beq.n	8009da0 <HAL_UART_IRQHandler+0x324>
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8f9 	bl	8009f90 <UART_Transmit_IT>
    return;
 8009d9e:	e012      	b.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00d      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d008      	beq.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f93a 	bl	800a02e <UART_EndTransmit_IT>
    return;
 8009dba:	e004      	b.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
    return;
 8009dbc:	bf00      	nop
 8009dbe:	e002      	b.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8009dc0:	bf00      	nop
 8009dc2:	e000      	b.n	8009dc6 <HAL_UART_IRQHandler+0x34a>
      return;
 8009dc4:	bf00      	nop
  }
}
 8009dc6:	3728      	adds	r7, #40	; 0x28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	08009f69 	.word	0x08009f69

08009dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bc80      	pop	{r7}
 8009de0:	4770      	bx	lr

08009de2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bc80      	pop	{r7}
 8009df2:	4770      	bx	lr

08009df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr

08009e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	4613      	mov	r3, r2
 8009e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e1a:	e02c      	b.n	8009e76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e22:	d028      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d007      	beq.n	8009e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8009e2a:	f7fc fed9 	bl	8006be0 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d21d      	bcs.n	8009e76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	695a      	ldr	r2, [r3, #20]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e00f      	b.n	8009e96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d0c3      	beq.n	8009e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	88fa      	ldrh	r2, [r7, #6]
 8009eb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	88fa      	ldrh	r2, [r7, #6]
 8009ebc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2222      	movs	r2, #34	; 0x22
 8009ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695a      	ldr	r2, [r3, #20]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0201 	orr.w	r2, r2, #1
 8009ef2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f042 0220 	orr.w	r2, r2, #32
 8009f02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr

08009f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009f26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	695a      	ldr	r2, [r3, #20]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0201 	bic.w	r2, r2, #1
 8009f36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d107      	bne.n	8009f50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0210 	bic.w	r2, r2, #16
 8009f4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f5e:	bf00      	nop
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bc80      	pop	{r7}
 8009f66:	4770      	bx	lr

08009f68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7ff ff2d 	bl	8009de2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b21      	cmp	r3, #33	; 0x21
 8009fa2:	d13e      	bne.n	800a022 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fac:	d114      	bne.n	8009fd8 <UART_Transmit_IT+0x48>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d110      	bne.n	8009fd8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	1c9a      	adds	r2, r3, #2
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	621a      	str	r2, [r3, #32]
 8009fd6:	e008      	b.n	8009fea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	1c59      	adds	r1, r3, #1
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6211      	str	r1, [r2, #32]
 8009fe2:	781a      	ldrb	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10f      	bne.n	800a01e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a00c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68da      	ldr	r2, [r3, #12]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a01c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	e000      	b.n	800a024 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a022:	2302      	movs	r3, #2
  }
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr

0800a02e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2220      	movs	r2, #32
 800a04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff febe 	bl	8009dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b22      	cmp	r3, #34	; 0x22
 800a070:	f040 8099 	bne.w	800a1a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a07c:	d117      	bne.n	800a0ae <UART_Receive_IT+0x50>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d113      	bne.n	800a0ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	b29b      	uxth	r3, r3
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a6:	1c9a      	adds	r2, r3, #2
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28
 800a0ac:	e026      	b.n	800a0fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c0:	d007      	beq.n	800a0d2 <UART_Receive_IT+0x74>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10a      	bne.n	800a0e0 <UART_Receive_IT+0x82>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d106      	bne.n	800a0e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e008      	b.n	800a0f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29b      	uxth	r3, r3
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	4619      	mov	r1, r3
 800a10a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d148      	bne.n	800a1a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0220 	bic.w	r2, r2, #32
 800a11e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a12e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695a      	ldr	r2, [r3, #20]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0201 	bic.w	r2, r2, #1
 800a13e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d123      	bne.n	800a198 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68da      	ldr	r2, [r3, #12]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0210 	bic.w	r2, r2, #16
 800a164:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b10      	cmp	r3, #16
 800a172:	d10a      	bne.n	800a18a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fe2f 	bl	8009df4 <HAL_UARTEx_RxEventCallback>
 800a196:	e002      	b.n	800a19e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7fc f8a5 	bl	80062e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e002      	b.n	800a1a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e000      	b.n	800a1a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a1a6:	2302      	movs	r3, #2
  }
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3718      	adds	r7, #24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	430a      	orrs	r2, r1
 800a1cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689a      	ldr	r2, [r3, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a1ea:	f023 030c 	bic.w	r3, r3, #12
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6812      	ldr	r2, [r2, #0]
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a2c      	ldr	r2, [pc, #176]	; (800a2c4 <UART_SetConfig+0x114>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a218:	f7fe fb1a 	bl	8008850 <HAL_RCC_GetPCLK2Freq>
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	e002      	b.n	800a226 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a220:	f7fe fb02 	bl	8008828 <HAL_RCC_GetPCLK1Freq>
 800a224:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009a      	lsls	r2, r3, #2
 800a230:	441a      	add	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23c:	4a22      	ldr	r2, [pc, #136]	; (800a2c8 <UART_SetConfig+0x118>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	095b      	lsrs	r3, r3, #5
 800a244:	0119      	lsls	r1, r3, #4
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	009a      	lsls	r2, r3, #2
 800a250:	441a      	add	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	fbb2 f2f3 	udiv	r2, r2, r3
 800a25c:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <UART_SetConfig+0x118>)
 800a25e:	fba3 0302 	umull	r0, r3, r3, r2
 800a262:	095b      	lsrs	r3, r3, #5
 800a264:	2064      	movs	r0, #100	; 0x64
 800a266:	fb00 f303 	mul.w	r3, r0, r3
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	3332      	adds	r3, #50	; 0x32
 800a270:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <UART_SetConfig+0x118>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	095b      	lsrs	r3, r3, #5
 800a278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a27c:	4419      	add	r1, r3
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	009a      	lsls	r2, r3, #2
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	fbb2 f2f3 	udiv	r2, r2, r3
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <UART_SetConfig+0x118>)
 800a296:	fba3 0302 	umull	r0, r3, r3, r2
 800a29a:	095b      	lsrs	r3, r3, #5
 800a29c:	2064      	movs	r0, #100	; 0x64
 800a29e:	fb00 f303 	mul.w	r3, r0, r3
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	3332      	adds	r3, #50	; 0x32
 800a2a8:	4a07      	ldr	r2, [pc, #28]	; (800a2c8 <UART_SetConfig+0x118>)
 800a2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ae:	095b      	lsrs	r3, r3, #5
 800a2b0:	f003 020f 	and.w	r2, r3, #15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a2bc:	bf00      	nop
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	40013800 	.word	0x40013800
 800a2c8:	51eb851f 	.word	0x51eb851f

0800a2cc <__errno>:
 800a2cc:	4b01      	ldr	r3, [pc, #4]	; (800a2d4 <__errno+0x8>)
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000010 	.word	0x20000010

0800a2d8 <__libc_init_array>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	2600      	movs	r6, #0
 800a2dc:	4d0c      	ldr	r5, [pc, #48]	; (800a310 <__libc_init_array+0x38>)
 800a2de:	4c0d      	ldr	r4, [pc, #52]	; (800a314 <__libc_init_array+0x3c>)
 800a2e0:	1b64      	subs	r4, r4, r5
 800a2e2:	10a4      	asrs	r4, r4, #2
 800a2e4:	42a6      	cmp	r6, r4
 800a2e6:	d109      	bne.n	800a2fc <__libc_init_array+0x24>
 800a2e8:	f000 fff8 	bl	800b2dc <_init>
 800a2ec:	2600      	movs	r6, #0
 800a2ee:	4d0a      	ldr	r5, [pc, #40]	; (800a318 <__libc_init_array+0x40>)
 800a2f0:	4c0a      	ldr	r4, [pc, #40]	; (800a31c <__libc_init_array+0x44>)
 800a2f2:	1b64      	subs	r4, r4, r5
 800a2f4:	10a4      	asrs	r4, r4, #2
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	d105      	bne.n	800a306 <__libc_init_array+0x2e>
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a300:	4798      	blx	r3
 800a302:	3601      	adds	r6, #1
 800a304:	e7ee      	b.n	800a2e4 <__libc_init_array+0xc>
 800a306:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30a:	4798      	blx	r3
 800a30c:	3601      	adds	r6, #1
 800a30e:	e7f2      	b.n	800a2f6 <__libc_init_array+0x1e>
 800a310:	0800b564 	.word	0x0800b564
 800a314:	0800b564 	.word	0x0800b564
 800a318:	0800b564 	.word	0x0800b564
 800a31c:	0800b568 	.word	0x0800b568

0800a320 <memset>:
 800a320:	4603      	mov	r3, r0
 800a322:	4402      	add	r2, r0
 800a324:	4293      	cmp	r3, r2
 800a326:	d100      	bne.n	800a32a <memset+0xa>
 800a328:	4770      	bx	lr
 800a32a:	f803 1b01 	strb.w	r1, [r3], #1
 800a32e:	e7f9      	b.n	800a324 <memset+0x4>

0800a330 <iprintf>:
 800a330:	b40f      	push	{r0, r1, r2, r3}
 800a332:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <iprintf+0x2c>)
 800a334:	b513      	push	{r0, r1, r4, lr}
 800a336:	681c      	ldr	r4, [r3, #0]
 800a338:	b124      	cbz	r4, 800a344 <iprintf+0x14>
 800a33a:	69a3      	ldr	r3, [r4, #24]
 800a33c:	b913      	cbnz	r3, 800a344 <iprintf+0x14>
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fa5e 	bl	800a800 <__sinit>
 800a344:	ab05      	add	r3, sp, #20
 800a346:	4620      	mov	r0, r4
 800a348:	9a04      	ldr	r2, [sp, #16]
 800a34a:	68a1      	ldr	r1, [r4, #8]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	f000 fc29 	bl	800aba4 <_vfiprintf_r>
 800a352:	b002      	add	sp, #8
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a358:	b004      	add	sp, #16
 800a35a:	4770      	bx	lr
 800a35c:	20000010 	.word	0x20000010

0800a360 <_puts_r>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	460e      	mov	r6, r1
 800a364:	4605      	mov	r5, r0
 800a366:	b118      	cbz	r0, 800a370 <_puts_r+0x10>
 800a368:	6983      	ldr	r3, [r0, #24]
 800a36a:	b90b      	cbnz	r3, 800a370 <_puts_r+0x10>
 800a36c:	f000 fa48 	bl	800a800 <__sinit>
 800a370:	69ab      	ldr	r3, [r5, #24]
 800a372:	68ac      	ldr	r4, [r5, #8]
 800a374:	b913      	cbnz	r3, 800a37c <_puts_r+0x1c>
 800a376:	4628      	mov	r0, r5
 800a378:	f000 fa42 	bl	800a800 <__sinit>
 800a37c:	4b2c      	ldr	r3, [pc, #176]	; (800a430 <_puts_r+0xd0>)
 800a37e:	429c      	cmp	r4, r3
 800a380:	d120      	bne.n	800a3c4 <_puts_r+0x64>
 800a382:	686c      	ldr	r4, [r5, #4]
 800a384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a386:	07db      	lsls	r3, r3, #31
 800a388:	d405      	bmi.n	800a396 <_puts_r+0x36>
 800a38a:	89a3      	ldrh	r3, [r4, #12]
 800a38c:	0598      	lsls	r0, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_puts_r+0x36>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f000 fad3 	bl	800a93c <__retarget_lock_acquire_recursive>
 800a396:	89a3      	ldrh	r3, [r4, #12]
 800a398:	0719      	lsls	r1, r3, #28
 800a39a:	d51d      	bpl.n	800a3d8 <_puts_r+0x78>
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	b1db      	cbz	r3, 800a3d8 <_puts_r+0x78>
 800a3a0:	3e01      	subs	r6, #1
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	60a3      	str	r3, [r4, #8]
 800a3ac:	bb39      	cbnz	r1, 800a3fe <_puts_r+0x9e>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da38      	bge.n	800a424 <_puts_r+0xc4>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	210a      	movs	r1, #10
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f000 f848 	bl	800a44c <__swbuf_r>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d011      	beq.n	800a3e4 <_puts_r+0x84>
 800a3c0:	250a      	movs	r5, #10
 800a3c2:	e011      	b.n	800a3e8 <_puts_r+0x88>
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <_puts_r+0xd4>)
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d101      	bne.n	800a3ce <_puts_r+0x6e>
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	e7da      	b.n	800a384 <_puts_r+0x24>
 800a3ce:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <_puts_r+0xd8>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	bf08      	it	eq
 800a3d4:	68ec      	ldreq	r4, [r5, #12]
 800a3d6:	e7d5      	b.n	800a384 <_puts_r+0x24>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f888 	bl	800a4f0 <__swsetup_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d0dd      	beq.n	800a3a0 <_puts_r+0x40>
 800a3e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ea:	07da      	lsls	r2, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_puts_r+0x9a>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_puts_r+0x9a>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f000 faa2 	bl	800a93e <__retarget_lock_release_recursive>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da04      	bge.n	800a40c <_puts_r+0xac>
 800a402:	69a2      	ldr	r2, [r4, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	dc06      	bgt.n	800a416 <_puts_r+0xb6>
 800a408:	290a      	cmp	r1, #10
 800a40a:	d004      	beq.n	800a416 <_puts_r+0xb6>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	e7c5      	b.n	800a3a2 <_puts_r+0x42>
 800a416:	4622      	mov	r2, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f000 f817 	bl	800a44c <__swbuf_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	d1bf      	bne.n	800a3a2 <_puts_r+0x42>
 800a422:	e7df      	b.n	800a3e4 <_puts_r+0x84>
 800a424:	250a      	movs	r5, #10
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	701d      	strb	r5, [r3, #0]
 800a42e:	e7db      	b.n	800a3e8 <_puts_r+0x88>
 800a430:	0800b4f0 	.word	0x0800b4f0
 800a434:	0800b510 	.word	0x0800b510
 800a438:	0800b4d0 	.word	0x0800b4d0

0800a43c <puts>:
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <puts+0xc>)
 800a43e:	4601      	mov	r1, r0
 800a440:	6818      	ldr	r0, [r3, #0]
 800a442:	f7ff bf8d 	b.w	800a360 <_puts_r>
 800a446:	bf00      	nop
 800a448:	20000010 	.word	0x20000010

0800a44c <__swbuf_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	460e      	mov	r6, r1
 800a450:	4614      	mov	r4, r2
 800a452:	4605      	mov	r5, r0
 800a454:	b118      	cbz	r0, 800a45e <__swbuf_r+0x12>
 800a456:	6983      	ldr	r3, [r0, #24]
 800a458:	b90b      	cbnz	r3, 800a45e <__swbuf_r+0x12>
 800a45a:	f000 f9d1 	bl	800a800 <__sinit>
 800a45e:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <__swbuf_r+0x98>)
 800a460:	429c      	cmp	r4, r3
 800a462:	d12b      	bne.n	800a4bc <__swbuf_r+0x70>
 800a464:	686c      	ldr	r4, [r5, #4]
 800a466:	69a3      	ldr	r3, [r4, #24]
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	071a      	lsls	r2, r3, #28
 800a46e:	d52f      	bpl.n	800a4d0 <__swbuf_r+0x84>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	b36b      	cbz	r3, 800a4d0 <__swbuf_r+0x84>
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	b2f6      	uxtb	r6, r6
 800a47a:	1ac0      	subs	r0, r0, r3
 800a47c:	6963      	ldr	r3, [r4, #20]
 800a47e:	4637      	mov	r7, r6
 800a480:	4283      	cmp	r3, r0
 800a482:	dc04      	bgt.n	800a48e <__swbuf_r+0x42>
 800a484:	4621      	mov	r1, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f000 f926 	bl	800a6d8 <_fflush_r>
 800a48c:	bb30      	cbnz	r0, 800a4dc <__swbuf_r+0x90>
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	3001      	adds	r0, #1
 800a492:	3b01      	subs	r3, #1
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	1c5a      	adds	r2, r3, #1
 800a49a:	6022      	str	r2, [r4, #0]
 800a49c:	701e      	strb	r6, [r3, #0]
 800a49e:	6963      	ldr	r3, [r4, #20]
 800a4a0:	4283      	cmp	r3, r0
 800a4a2:	d004      	beq.n	800a4ae <__swbuf_r+0x62>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	07db      	lsls	r3, r3, #31
 800a4a8:	d506      	bpl.n	800a4b8 <__swbuf_r+0x6c>
 800a4aa:	2e0a      	cmp	r6, #10
 800a4ac:	d104      	bne.n	800a4b8 <__swbuf_r+0x6c>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 f911 	bl	800a6d8 <_fflush_r>
 800a4b6:	b988      	cbnz	r0, 800a4dc <__swbuf_r+0x90>
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <__swbuf_r+0x9c>)
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	d101      	bne.n	800a4c6 <__swbuf_r+0x7a>
 800a4c2:	68ac      	ldr	r4, [r5, #8]
 800a4c4:	e7cf      	b.n	800a466 <__swbuf_r+0x1a>
 800a4c6:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <__swbuf_r+0xa0>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	bf08      	it	eq
 800a4cc:	68ec      	ldreq	r4, [r5, #12]
 800a4ce:	e7ca      	b.n	800a466 <__swbuf_r+0x1a>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f000 f80c 	bl	800a4f0 <__swsetup_r>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d0cb      	beq.n	800a474 <__swbuf_r+0x28>
 800a4dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a4e0:	e7ea      	b.n	800a4b8 <__swbuf_r+0x6c>
 800a4e2:	bf00      	nop
 800a4e4:	0800b4f0 	.word	0x0800b4f0
 800a4e8:	0800b510 	.word	0x0800b510
 800a4ec:	0800b4d0 	.word	0x0800b4d0

0800a4f0 <__swsetup_r>:
 800a4f0:	4b32      	ldr	r3, [pc, #200]	; (800a5bc <__swsetup_r+0xcc>)
 800a4f2:	b570      	push	{r4, r5, r6, lr}
 800a4f4:	681d      	ldr	r5, [r3, #0]
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	b125      	cbz	r5, 800a506 <__swsetup_r+0x16>
 800a4fc:	69ab      	ldr	r3, [r5, #24]
 800a4fe:	b913      	cbnz	r3, 800a506 <__swsetup_r+0x16>
 800a500:	4628      	mov	r0, r5
 800a502:	f000 f97d 	bl	800a800 <__sinit>
 800a506:	4b2e      	ldr	r3, [pc, #184]	; (800a5c0 <__swsetup_r+0xd0>)
 800a508:	429c      	cmp	r4, r3
 800a50a:	d10f      	bne.n	800a52c <__swsetup_r+0x3c>
 800a50c:	686c      	ldr	r4, [r5, #4]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a514:	0719      	lsls	r1, r3, #28
 800a516:	d42c      	bmi.n	800a572 <__swsetup_r+0x82>
 800a518:	06dd      	lsls	r5, r3, #27
 800a51a:	d411      	bmi.n	800a540 <__swsetup_r+0x50>
 800a51c:	2309      	movs	r3, #9
 800a51e:	6033      	str	r3, [r6, #0]
 800a520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	e03e      	b.n	800a5aa <__swsetup_r+0xba>
 800a52c:	4b25      	ldr	r3, [pc, #148]	; (800a5c4 <__swsetup_r+0xd4>)
 800a52e:	429c      	cmp	r4, r3
 800a530:	d101      	bne.n	800a536 <__swsetup_r+0x46>
 800a532:	68ac      	ldr	r4, [r5, #8]
 800a534:	e7eb      	b.n	800a50e <__swsetup_r+0x1e>
 800a536:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <__swsetup_r+0xd8>)
 800a538:	429c      	cmp	r4, r3
 800a53a:	bf08      	it	eq
 800a53c:	68ec      	ldreq	r4, [r5, #12]
 800a53e:	e7e6      	b.n	800a50e <__swsetup_r+0x1e>
 800a540:	0758      	lsls	r0, r3, #29
 800a542:	d512      	bpl.n	800a56a <__swsetup_r+0x7a>
 800a544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a546:	b141      	cbz	r1, 800a55a <__swsetup_r+0x6a>
 800a548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a54c:	4299      	cmp	r1, r3
 800a54e:	d002      	beq.n	800a556 <__swsetup_r+0x66>
 800a550:	4630      	mov	r0, r6
 800a552:	f000 fa59 	bl	800aa08 <_free_r>
 800a556:	2300      	movs	r3, #0
 800a558:	6363      	str	r3, [r4, #52]	; 0x34
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	2300      	movs	r3, #0
 800a564:	6063      	str	r3, [r4, #4]
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f043 0308 	orr.w	r3, r3, #8
 800a570:	81a3      	strh	r3, [r4, #12]
 800a572:	6923      	ldr	r3, [r4, #16]
 800a574:	b94b      	cbnz	r3, 800a58a <__swsetup_r+0x9a>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a580:	d003      	beq.n	800a58a <__swsetup_r+0x9a>
 800a582:	4621      	mov	r1, r4
 800a584:	4630      	mov	r0, r6
 800a586:	f000 f9ff 	bl	800a988 <__smakebuf_r>
 800a58a:	89a0      	ldrh	r0, [r4, #12]
 800a58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a590:	f010 0301 	ands.w	r3, r0, #1
 800a594:	d00a      	beq.n	800a5ac <__swsetup_r+0xbc>
 800a596:	2300      	movs	r3, #0
 800a598:	60a3      	str	r3, [r4, #8]
 800a59a:	6963      	ldr	r3, [r4, #20]
 800a59c:	425b      	negs	r3, r3
 800a59e:	61a3      	str	r3, [r4, #24]
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	b943      	cbnz	r3, 800a5b6 <__swsetup_r+0xc6>
 800a5a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5a8:	d1ba      	bne.n	800a520 <__swsetup_r+0x30>
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	0781      	lsls	r1, r0, #30
 800a5ae:	bf58      	it	pl
 800a5b0:	6963      	ldrpl	r3, [r4, #20]
 800a5b2:	60a3      	str	r3, [r4, #8]
 800a5b4:	e7f4      	b.n	800a5a0 <__swsetup_r+0xb0>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e7f7      	b.n	800a5aa <__swsetup_r+0xba>
 800a5ba:	bf00      	nop
 800a5bc:	20000010 	.word	0x20000010
 800a5c0:	0800b4f0 	.word	0x0800b4f0
 800a5c4:	0800b510 	.word	0x0800b510
 800a5c8:	0800b4d0 	.word	0x0800b4d0

0800a5cc <__sflush_r>:
 800a5cc:	898a      	ldrh	r2, [r1, #12]
 800a5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	0710      	lsls	r0, r2, #28
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	d458      	bmi.n	800a68c <__sflush_r+0xc0>
 800a5da:	684b      	ldr	r3, [r1, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dc05      	bgt.n	800a5ec <__sflush_r+0x20>
 800a5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	dc02      	bgt.n	800a5ec <__sflush_r+0x20>
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	d0f9      	beq.n	800a5e6 <__sflush_r+0x1a>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5f8:	682f      	ldr	r7, [r5, #0]
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	d032      	beq.n	800a664 <__sflush_r+0x98>
 800a5fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	075a      	lsls	r2, r3, #29
 800a604:	d505      	bpl.n	800a612 <__sflush_r+0x46>
 800a606:	6863      	ldr	r3, [r4, #4]
 800a608:	1ac0      	subs	r0, r0, r3
 800a60a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a60c:	b10b      	cbz	r3, 800a612 <__sflush_r+0x46>
 800a60e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a610:	1ac0      	subs	r0, r0, r3
 800a612:	2300      	movs	r3, #0
 800a614:	4602      	mov	r2, r0
 800a616:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a618:	4628      	mov	r0, r5
 800a61a:	6a21      	ldr	r1, [r4, #32]
 800a61c:	47b0      	blx	r6
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	d106      	bne.n	800a632 <__sflush_r+0x66>
 800a624:	6829      	ldr	r1, [r5, #0]
 800a626:	291d      	cmp	r1, #29
 800a628:	d82c      	bhi.n	800a684 <__sflush_r+0xb8>
 800a62a:	4a2a      	ldr	r2, [pc, #168]	; (800a6d4 <__sflush_r+0x108>)
 800a62c:	40ca      	lsrs	r2, r1
 800a62e:	07d6      	lsls	r6, r2, #31
 800a630:	d528      	bpl.n	800a684 <__sflush_r+0xb8>
 800a632:	2200      	movs	r2, #0
 800a634:	6062      	str	r2, [r4, #4]
 800a636:	6922      	ldr	r2, [r4, #16]
 800a638:	04d9      	lsls	r1, r3, #19
 800a63a:	6022      	str	r2, [r4, #0]
 800a63c:	d504      	bpl.n	800a648 <__sflush_r+0x7c>
 800a63e:	1c42      	adds	r2, r0, #1
 800a640:	d101      	bne.n	800a646 <__sflush_r+0x7a>
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	b903      	cbnz	r3, 800a648 <__sflush_r+0x7c>
 800a646:	6560      	str	r0, [r4, #84]	; 0x54
 800a648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a64a:	602f      	str	r7, [r5, #0]
 800a64c:	2900      	cmp	r1, #0
 800a64e:	d0ca      	beq.n	800a5e6 <__sflush_r+0x1a>
 800a650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a654:	4299      	cmp	r1, r3
 800a656:	d002      	beq.n	800a65e <__sflush_r+0x92>
 800a658:	4628      	mov	r0, r5
 800a65a:	f000 f9d5 	bl	800aa08 <_free_r>
 800a65e:	2000      	movs	r0, #0
 800a660:	6360      	str	r0, [r4, #52]	; 0x34
 800a662:	e7c1      	b.n	800a5e8 <__sflush_r+0x1c>
 800a664:	6a21      	ldr	r1, [r4, #32]
 800a666:	2301      	movs	r3, #1
 800a668:	4628      	mov	r0, r5
 800a66a:	47b0      	blx	r6
 800a66c:	1c41      	adds	r1, r0, #1
 800a66e:	d1c7      	bne.n	800a600 <__sflush_r+0x34>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0c4      	beq.n	800a600 <__sflush_r+0x34>
 800a676:	2b1d      	cmp	r3, #29
 800a678:	d001      	beq.n	800a67e <__sflush_r+0xb2>
 800a67a:	2b16      	cmp	r3, #22
 800a67c:	d101      	bne.n	800a682 <__sflush_r+0xb6>
 800a67e:	602f      	str	r7, [r5, #0]
 800a680:	e7b1      	b.n	800a5e6 <__sflush_r+0x1a>
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	e7ad      	b.n	800a5e8 <__sflush_r+0x1c>
 800a68c:	690f      	ldr	r7, [r1, #16]
 800a68e:	2f00      	cmp	r7, #0
 800a690:	d0a9      	beq.n	800a5e6 <__sflush_r+0x1a>
 800a692:	0793      	lsls	r3, r2, #30
 800a694:	bf18      	it	ne
 800a696:	2300      	movne	r3, #0
 800a698:	680e      	ldr	r6, [r1, #0]
 800a69a:	bf08      	it	eq
 800a69c:	694b      	ldreq	r3, [r1, #20]
 800a69e:	eba6 0807 	sub.w	r8, r6, r7
 800a6a2:	600f      	str	r7, [r1, #0]
 800a6a4:	608b      	str	r3, [r1, #8]
 800a6a6:	f1b8 0f00 	cmp.w	r8, #0
 800a6aa:	dd9c      	ble.n	800a5e6 <__sflush_r+0x1a>
 800a6ac:	4643      	mov	r3, r8
 800a6ae:	463a      	mov	r2, r7
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	6a21      	ldr	r1, [r4, #32]
 800a6b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6b6:	47b0      	blx	r6
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	dc06      	bgt.n	800a6ca <__sflush_r+0xfe>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c6:	81a3      	strh	r3, [r4, #12]
 800a6c8:	e78e      	b.n	800a5e8 <__sflush_r+0x1c>
 800a6ca:	4407      	add	r7, r0
 800a6cc:	eba8 0800 	sub.w	r8, r8, r0
 800a6d0:	e7e9      	b.n	800a6a6 <__sflush_r+0xda>
 800a6d2:	bf00      	nop
 800a6d4:	20400001 	.word	0x20400001

0800a6d8 <_fflush_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	690b      	ldr	r3, [r1, #16]
 800a6dc:	4605      	mov	r5, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	b913      	cbnz	r3, 800a6e8 <_fflush_r+0x10>
 800a6e2:	2500      	movs	r5, #0
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	b118      	cbz	r0, 800a6f2 <_fflush_r+0x1a>
 800a6ea:	6983      	ldr	r3, [r0, #24]
 800a6ec:	b90b      	cbnz	r3, 800a6f2 <_fflush_r+0x1a>
 800a6ee:	f000 f887 	bl	800a800 <__sinit>
 800a6f2:	4b14      	ldr	r3, [pc, #80]	; (800a744 <_fflush_r+0x6c>)
 800a6f4:	429c      	cmp	r4, r3
 800a6f6:	d11b      	bne.n	800a730 <_fflush_r+0x58>
 800a6f8:	686c      	ldr	r4, [r5, #4]
 800a6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0ef      	beq.n	800a6e2 <_fflush_r+0xa>
 800a702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a704:	07d0      	lsls	r0, r2, #31
 800a706:	d404      	bmi.n	800a712 <_fflush_r+0x3a>
 800a708:	0599      	lsls	r1, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_fflush_r+0x3a>
 800a70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a70e:	f000 f915 	bl	800a93c <__retarget_lock_acquire_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	4621      	mov	r1, r4
 800a716:	f7ff ff59 	bl	800a5cc <__sflush_r>
 800a71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a71c:	4605      	mov	r5, r0
 800a71e:	07da      	lsls	r2, r3, #31
 800a720:	d4e0      	bmi.n	800a6e4 <_fflush_r+0xc>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	059b      	lsls	r3, r3, #22
 800a726:	d4dd      	bmi.n	800a6e4 <_fflush_r+0xc>
 800a728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a72a:	f000 f908 	bl	800a93e <__retarget_lock_release_recursive>
 800a72e:	e7d9      	b.n	800a6e4 <_fflush_r+0xc>
 800a730:	4b05      	ldr	r3, [pc, #20]	; (800a748 <_fflush_r+0x70>)
 800a732:	429c      	cmp	r4, r3
 800a734:	d101      	bne.n	800a73a <_fflush_r+0x62>
 800a736:	68ac      	ldr	r4, [r5, #8]
 800a738:	e7df      	b.n	800a6fa <_fflush_r+0x22>
 800a73a:	4b04      	ldr	r3, [pc, #16]	; (800a74c <_fflush_r+0x74>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	bf08      	it	eq
 800a740:	68ec      	ldreq	r4, [r5, #12]
 800a742:	e7da      	b.n	800a6fa <_fflush_r+0x22>
 800a744:	0800b4f0 	.word	0x0800b4f0
 800a748:	0800b510 	.word	0x0800b510
 800a74c:	0800b4d0 	.word	0x0800b4d0

0800a750 <std>:
 800a750:	2300      	movs	r3, #0
 800a752:	b510      	push	{r4, lr}
 800a754:	4604      	mov	r4, r0
 800a756:	e9c0 3300 	strd	r3, r3, [r0]
 800a75a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a75e:	6083      	str	r3, [r0, #8]
 800a760:	8181      	strh	r1, [r0, #12]
 800a762:	6643      	str	r3, [r0, #100]	; 0x64
 800a764:	81c2      	strh	r2, [r0, #14]
 800a766:	6183      	str	r3, [r0, #24]
 800a768:	4619      	mov	r1, r3
 800a76a:	2208      	movs	r2, #8
 800a76c:	305c      	adds	r0, #92	; 0x5c
 800a76e:	f7ff fdd7 	bl	800a320 <memset>
 800a772:	4b05      	ldr	r3, [pc, #20]	; (800a788 <std+0x38>)
 800a774:	6224      	str	r4, [r4, #32]
 800a776:	6263      	str	r3, [r4, #36]	; 0x24
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <std+0x3c>)
 800a77a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <std+0x40>)
 800a77e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <std+0x44>)
 800a782:	6323      	str	r3, [r4, #48]	; 0x30
 800a784:	bd10      	pop	{r4, pc}
 800a786:	bf00      	nop
 800a788:	0800b151 	.word	0x0800b151
 800a78c:	0800b173 	.word	0x0800b173
 800a790:	0800b1ab 	.word	0x0800b1ab
 800a794:	0800b1cf 	.word	0x0800b1cf

0800a798 <_cleanup_r>:
 800a798:	4901      	ldr	r1, [pc, #4]	; (800a7a0 <_cleanup_r+0x8>)
 800a79a:	f000 b8af 	b.w	800a8fc <_fwalk_reent>
 800a79e:	bf00      	nop
 800a7a0:	0800a6d9 	.word	0x0800a6d9

0800a7a4 <__sfmoreglue>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	2568      	movs	r5, #104	; 0x68
 800a7a8:	1e4a      	subs	r2, r1, #1
 800a7aa:	4355      	muls	r5, r2
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7b2:	f000 f975 	bl	800aaa0 <_malloc_r>
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	b140      	cbz	r0, 800a7cc <__sfmoreglue+0x28>
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	e9c0 1600 	strd	r1, r6, [r0]
 800a7c0:	300c      	adds	r0, #12
 800a7c2:	60a0      	str	r0, [r4, #8]
 800a7c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7c8:	f7ff fdaa 	bl	800a320 <memset>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}

0800a7d0 <__sfp_lock_acquire>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__sfp_lock_acquire+0x8>)
 800a7d2:	f000 b8b3 	b.w	800a93c <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	200001e8 	.word	0x200001e8

0800a7dc <__sfp_lock_release>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__sfp_lock_release+0x8>)
 800a7de:	f000 b8ae 	b.w	800a93e <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	200001e8 	.word	0x200001e8

0800a7e8 <__sinit_lock_acquire>:
 800a7e8:	4801      	ldr	r0, [pc, #4]	; (800a7f0 <__sinit_lock_acquire+0x8>)
 800a7ea:	f000 b8a7 	b.w	800a93c <__retarget_lock_acquire_recursive>
 800a7ee:	bf00      	nop
 800a7f0:	200001e3 	.word	0x200001e3

0800a7f4 <__sinit_lock_release>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	; (800a7fc <__sinit_lock_release+0x8>)
 800a7f6:	f000 b8a2 	b.w	800a93e <__retarget_lock_release_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	200001e3 	.word	0x200001e3

0800a800 <__sinit>:
 800a800:	b510      	push	{r4, lr}
 800a802:	4604      	mov	r4, r0
 800a804:	f7ff fff0 	bl	800a7e8 <__sinit_lock_acquire>
 800a808:	69a3      	ldr	r3, [r4, #24]
 800a80a:	b11b      	cbz	r3, 800a814 <__sinit+0x14>
 800a80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a810:	f7ff bff0 	b.w	800a7f4 <__sinit_lock_release>
 800a814:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a818:	6523      	str	r3, [r4, #80]	; 0x50
 800a81a:	4b13      	ldr	r3, [pc, #76]	; (800a868 <__sinit+0x68>)
 800a81c:	4a13      	ldr	r2, [pc, #76]	; (800a86c <__sinit+0x6c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	62a2      	str	r2, [r4, #40]	; 0x28
 800a822:	42a3      	cmp	r3, r4
 800a824:	bf08      	it	eq
 800a826:	2301      	moveq	r3, #1
 800a828:	4620      	mov	r0, r4
 800a82a:	bf08      	it	eq
 800a82c:	61a3      	streq	r3, [r4, #24]
 800a82e:	f000 f81f 	bl	800a870 <__sfp>
 800a832:	6060      	str	r0, [r4, #4]
 800a834:	4620      	mov	r0, r4
 800a836:	f000 f81b 	bl	800a870 <__sfp>
 800a83a:	60a0      	str	r0, [r4, #8]
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 f817 	bl	800a870 <__sfp>
 800a842:	2200      	movs	r2, #0
 800a844:	2104      	movs	r1, #4
 800a846:	60e0      	str	r0, [r4, #12]
 800a848:	6860      	ldr	r0, [r4, #4]
 800a84a:	f7ff ff81 	bl	800a750 <std>
 800a84e:	2201      	movs	r2, #1
 800a850:	2109      	movs	r1, #9
 800a852:	68a0      	ldr	r0, [r4, #8]
 800a854:	f7ff ff7c 	bl	800a750 <std>
 800a858:	2202      	movs	r2, #2
 800a85a:	2112      	movs	r1, #18
 800a85c:	68e0      	ldr	r0, [r4, #12]
 800a85e:	f7ff ff77 	bl	800a750 <std>
 800a862:	2301      	movs	r3, #1
 800a864:	61a3      	str	r3, [r4, #24]
 800a866:	e7d1      	b.n	800a80c <__sinit+0xc>
 800a868:	0800b4cc 	.word	0x0800b4cc
 800a86c:	0800a799 	.word	0x0800a799

0800a870 <__sfp>:
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a872:	4607      	mov	r7, r0
 800a874:	f7ff ffac 	bl	800a7d0 <__sfp_lock_acquire>
 800a878:	4b1e      	ldr	r3, [pc, #120]	; (800a8f4 <__sfp+0x84>)
 800a87a:	681e      	ldr	r6, [r3, #0]
 800a87c:	69b3      	ldr	r3, [r6, #24]
 800a87e:	b913      	cbnz	r3, 800a886 <__sfp+0x16>
 800a880:	4630      	mov	r0, r6
 800a882:	f7ff ffbd 	bl	800a800 <__sinit>
 800a886:	3648      	adds	r6, #72	; 0x48
 800a888:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	d503      	bpl.n	800a898 <__sfp+0x28>
 800a890:	6833      	ldr	r3, [r6, #0]
 800a892:	b30b      	cbz	r3, 800a8d8 <__sfp+0x68>
 800a894:	6836      	ldr	r6, [r6, #0]
 800a896:	e7f7      	b.n	800a888 <__sfp+0x18>
 800a898:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a89c:	b9d5      	cbnz	r5, 800a8d4 <__sfp+0x64>
 800a89e:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <__sfp+0x88>)
 800a8a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8a4:	60e3      	str	r3, [r4, #12]
 800a8a6:	6665      	str	r5, [r4, #100]	; 0x64
 800a8a8:	f000 f847 	bl	800a93a <__retarget_lock_init_recursive>
 800a8ac:	f7ff ff96 	bl	800a7dc <__sfp_lock_release>
 800a8b0:	2208      	movs	r2, #8
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8bc:	6025      	str	r5, [r4, #0]
 800a8be:	61a5      	str	r5, [r4, #24]
 800a8c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8c4:	f7ff fd2c 	bl	800a320 <memset>
 800a8c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	3468      	adds	r4, #104	; 0x68
 800a8d6:	e7d9      	b.n	800a88c <__sfp+0x1c>
 800a8d8:	2104      	movs	r1, #4
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f7ff ff62 	bl	800a7a4 <__sfmoreglue>
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	6030      	str	r0, [r6, #0]
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d1d5      	bne.n	800a894 <__sfp+0x24>
 800a8e8:	f7ff ff78 	bl	800a7dc <__sfp_lock_release>
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	e7ee      	b.n	800a8d0 <__sfp+0x60>
 800a8f2:	bf00      	nop
 800a8f4:	0800b4cc 	.word	0x0800b4cc
 800a8f8:	ffff0001 	.word	0xffff0001

0800a8fc <_fwalk_reent>:
 800a8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a900:	4606      	mov	r6, r0
 800a902:	4688      	mov	r8, r1
 800a904:	2700      	movs	r7, #0
 800a906:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a90a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a90e:	f1b9 0901 	subs.w	r9, r9, #1
 800a912:	d505      	bpl.n	800a920 <_fwalk_reent+0x24>
 800a914:	6824      	ldr	r4, [r4, #0]
 800a916:	2c00      	cmp	r4, #0
 800a918:	d1f7      	bne.n	800a90a <_fwalk_reent+0xe>
 800a91a:	4638      	mov	r0, r7
 800a91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a920:	89ab      	ldrh	r3, [r5, #12]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d907      	bls.n	800a936 <_fwalk_reent+0x3a>
 800a926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a92a:	3301      	adds	r3, #1
 800a92c:	d003      	beq.n	800a936 <_fwalk_reent+0x3a>
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	47c0      	blx	r8
 800a934:	4307      	orrs	r7, r0
 800a936:	3568      	adds	r5, #104	; 0x68
 800a938:	e7e9      	b.n	800a90e <_fwalk_reent+0x12>

0800a93a <__retarget_lock_init_recursive>:
 800a93a:	4770      	bx	lr

0800a93c <__retarget_lock_acquire_recursive>:
 800a93c:	4770      	bx	lr

0800a93e <__retarget_lock_release_recursive>:
 800a93e:	4770      	bx	lr

0800a940 <__swhatbuf_r>:
 800a940:	b570      	push	{r4, r5, r6, lr}
 800a942:	460e      	mov	r6, r1
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	4614      	mov	r4, r2
 800a94a:	2900      	cmp	r1, #0
 800a94c:	461d      	mov	r5, r3
 800a94e:	b096      	sub	sp, #88	; 0x58
 800a950:	da07      	bge.n	800a962 <__swhatbuf_r+0x22>
 800a952:	2300      	movs	r3, #0
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	89b3      	ldrh	r3, [r6, #12]
 800a958:	061a      	lsls	r2, r3, #24
 800a95a:	d410      	bmi.n	800a97e <__swhatbuf_r+0x3e>
 800a95c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a960:	e00e      	b.n	800a980 <__swhatbuf_r+0x40>
 800a962:	466a      	mov	r2, sp
 800a964:	f000 fc5a 	bl	800b21c <_fstat_r>
 800a968:	2800      	cmp	r0, #0
 800a96a:	dbf2      	blt.n	800a952 <__swhatbuf_r+0x12>
 800a96c:	9a01      	ldr	r2, [sp, #4]
 800a96e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a976:	425a      	negs	r2, r3
 800a978:	415a      	adcs	r2, r3
 800a97a:	602a      	str	r2, [r5, #0]
 800a97c:	e7ee      	b.n	800a95c <__swhatbuf_r+0x1c>
 800a97e:	2340      	movs	r3, #64	; 0x40
 800a980:	2000      	movs	r0, #0
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	b016      	add	sp, #88	; 0x58
 800a986:	bd70      	pop	{r4, r5, r6, pc}

0800a988 <__smakebuf_r>:
 800a988:	898b      	ldrh	r3, [r1, #12]
 800a98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a98c:	079d      	lsls	r5, r3, #30
 800a98e:	4606      	mov	r6, r0
 800a990:	460c      	mov	r4, r1
 800a992:	d507      	bpl.n	800a9a4 <__smakebuf_r+0x1c>
 800a994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	2301      	movs	r3, #1
 800a99e:	6163      	str	r3, [r4, #20]
 800a9a0:	b002      	add	sp, #8
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	466a      	mov	r2, sp
 800a9a6:	ab01      	add	r3, sp, #4
 800a9a8:	f7ff ffca 	bl	800a940 <__swhatbuf_r>
 800a9ac:	9900      	ldr	r1, [sp, #0]
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f000 f875 	bl	800aaa0 <_malloc_r>
 800a9b6:	b948      	cbnz	r0, 800a9cc <__smakebuf_r+0x44>
 800a9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d4ef      	bmi.n	800a9a0 <__smakebuf_r+0x18>
 800a9c0:	f023 0303 	bic.w	r3, r3, #3
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	e7e3      	b.n	800a994 <__smakebuf_r+0xc>
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <__smakebuf_r+0x7c>)
 800a9ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	6020      	str	r0, [r4, #0]
 800a9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	6120      	str	r0, [r4, #16]
 800a9de:	6163      	str	r3, [r4, #20]
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	b15b      	cbz	r3, 800a9fc <__smakebuf_r+0x74>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ea:	f000 fc29 	bl	800b240 <_isatty_r>
 800a9ee:	b128      	cbz	r0, 800a9fc <__smakebuf_r+0x74>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	f043 0301 	orr.w	r3, r3, #1
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	89a0      	ldrh	r0, [r4, #12]
 800a9fe:	4305      	orrs	r5, r0
 800aa00:	81a5      	strh	r5, [r4, #12]
 800aa02:	e7cd      	b.n	800a9a0 <__smakebuf_r+0x18>
 800aa04:	0800a799 	.word	0x0800a799

0800aa08 <_free_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4605      	mov	r5, r0
 800aa0c:	2900      	cmp	r1, #0
 800aa0e:	d043      	beq.n	800aa98 <_free_r+0x90>
 800aa10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa14:	1f0c      	subs	r4, r1, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	18e4      	addlt	r4, r4, r3
 800aa1c:	f000 fc40 	bl	800b2a0 <__malloc_lock>
 800aa20:	4a1e      	ldr	r2, [pc, #120]	; (800aa9c <_free_r+0x94>)
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	4610      	mov	r0, r2
 800aa26:	b933      	cbnz	r3, 800aa36 <_free_r+0x2e>
 800aa28:	6063      	str	r3, [r4, #4]
 800aa2a:	6014      	str	r4, [r2, #0]
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa32:	f000 bc3b 	b.w	800b2ac <__malloc_unlock>
 800aa36:	42a3      	cmp	r3, r4
 800aa38:	d90a      	bls.n	800aa50 <_free_r+0x48>
 800aa3a:	6821      	ldr	r1, [r4, #0]
 800aa3c:	1862      	adds	r2, r4, r1
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	bf01      	itttt	eq
 800aa42:	681a      	ldreq	r2, [r3, #0]
 800aa44:	685b      	ldreq	r3, [r3, #4]
 800aa46:	1852      	addeq	r2, r2, r1
 800aa48:	6022      	streq	r2, [r4, #0]
 800aa4a:	6063      	str	r3, [r4, #4]
 800aa4c:	6004      	str	r4, [r0, #0]
 800aa4e:	e7ed      	b.n	800aa2c <_free_r+0x24>
 800aa50:	461a      	mov	r2, r3
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	b10b      	cbz	r3, 800aa5a <_free_r+0x52>
 800aa56:	42a3      	cmp	r3, r4
 800aa58:	d9fa      	bls.n	800aa50 <_free_r+0x48>
 800aa5a:	6811      	ldr	r1, [r2, #0]
 800aa5c:	1850      	adds	r0, r2, r1
 800aa5e:	42a0      	cmp	r0, r4
 800aa60:	d10b      	bne.n	800aa7a <_free_r+0x72>
 800aa62:	6820      	ldr	r0, [r4, #0]
 800aa64:	4401      	add	r1, r0
 800aa66:	1850      	adds	r0, r2, r1
 800aa68:	4283      	cmp	r3, r0
 800aa6a:	6011      	str	r1, [r2, #0]
 800aa6c:	d1de      	bne.n	800aa2c <_free_r+0x24>
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	4401      	add	r1, r0
 800aa74:	6011      	str	r1, [r2, #0]
 800aa76:	6053      	str	r3, [r2, #4]
 800aa78:	e7d8      	b.n	800aa2c <_free_r+0x24>
 800aa7a:	d902      	bls.n	800aa82 <_free_r+0x7a>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	e7d4      	b.n	800aa2c <_free_r+0x24>
 800aa82:	6820      	ldr	r0, [r4, #0]
 800aa84:	1821      	adds	r1, r4, r0
 800aa86:	428b      	cmp	r3, r1
 800aa88:	bf01      	itttt	eq
 800aa8a:	6819      	ldreq	r1, [r3, #0]
 800aa8c:	685b      	ldreq	r3, [r3, #4]
 800aa8e:	1809      	addeq	r1, r1, r0
 800aa90:	6021      	streq	r1, [r4, #0]
 800aa92:	6063      	str	r3, [r4, #4]
 800aa94:	6054      	str	r4, [r2, #4]
 800aa96:	e7c9      	b.n	800aa2c <_free_r+0x24>
 800aa98:	bd38      	pop	{r3, r4, r5, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200000a0 	.word	0x200000a0

0800aaa0 <_malloc_r>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	1ccd      	adds	r5, r1, #3
 800aaa4:	f025 0503 	bic.w	r5, r5, #3
 800aaa8:	3508      	adds	r5, #8
 800aaaa:	2d0c      	cmp	r5, #12
 800aaac:	bf38      	it	cc
 800aaae:	250c      	movcc	r5, #12
 800aab0:	2d00      	cmp	r5, #0
 800aab2:	4606      	mov	r6, r0
 800aab4:	db01      	blt.n	800aaba <_malloc_r+0x1a>
 800aab6:	42a9      	cmp	r1, r5
 800aab8:	d903      	bls.n	800aac2 <_malloc_r+0x22>
 800aaba:	230c      	movs	r3, #12
 800aabc:	6033      	str	r3, [r6, #0]
 800aabe:	2000      	movs	r0, #0
 800aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac2:	f000 fbed 	bl	800b2a0 <__malloc_lock>
 800aac6:	4921      	ldr	r1, [pc, #132]	; (800ab4c <_malloc_r+0xac>)
 800aac8:	680a      	ldr	r2, [r1, #0]
 800aaca:	4614      	mov	r4, r2
 800aacc:	b99c      	cbnz	r4, 800aaf6 <_malloc_r+0x56>
 800aace:	4f20      	ldr	r7, [pc, #128]	; (800ab50 <_malloc_r+0xb0>)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	b923      	cbnz	r3, 800aade <_malloc_r+0x3e>
 800aad4:	4621      	mov	r1, r4
 800aad6:	4630      	mov	r0, r6
 800aad8:	f000 fb2a 	bl	800b130 <_sbrk_r>
 800aadc:	6038      	str	r0, [r7, #0]
 800aade:	4629      	mov	r1, r5
 800aae0:	4630      	mov	r0, r6
 800aae2:	f000 fb25 	bl	800b130 <_sbrk_r>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d123      	bne.n	800ab32 <_malloc_r+0x92>
 800aaea:	230c      	movs	r3, #12
 800aaec:	4630      	mov	r0, r6
 800aaee:	6033      	str	r3, [r6, #0]
 800aaf0:	f000 fbdc 	bl	800b2ac <__malloc_unlock>
 800aaf4:	e7e3      	b.n	800aabe <_malloc_r+0x1e>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	1b5b      	subs	r3, r3, r5
 800aafa:	d417      	bmi.n	800ab2c <_malloc_r+0x8c>
 800aafc:	2b0b      	cmp	r3, #11
 800aafe:	d903      	bls.n	800ab08 <_malloc_r+0x68>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	441c      	add	r4, r3
 800ab04:	6025      	str	r5, [r4, #0]
 800ab06:	e004      	b.n	800ab12 <_malloc_r+0x72>
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	42a2      	cmp	r2, r4
 800ab0c:	bf0c      	ite	eq
 800ab0e:	600b      	streq	r3, [r1, #0]
 800ab10:	6053      	strne	r3, [r2, #4]
 800ab12:	4630      	mov	r0, r6
 800ab14:	f000 fbca 	bl	800b2ac <__malloc_unlock>
 800ab18:	f104 000b 	add.w	r0, r4, #11
 800ab1c:	1d23      	adds	r3, r4, #4
 800ab1e:	f020 0007 	bic.w	r0, r0, #7
 800ab22:	1ac2      	subs	r2, r0, r3
 800ab24:	d0cc      	beq.n	800aac0 <_malloc_r+0x20>
 800ab26:	1a1b      	subs	r3, r3, r0
 800ab28:	50a3      	str	r3, [r4, r2]
 800ab2a:	e7c9      	b.n	800aac0 <_malloc_r+0x20>
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	6864      	ldr	r4, [r4, #4]
 800ab30:	e7cc      	b.n	800aacc <_malloc_r+0x2c>
 800ab32:	1cc4      	adds	r4, r0, #3
 800ab34:	f024 0403 	bic.w	r4, r4, #3
 800ab38:	42a0      	cmp	r0, r4
 800ab3a:	d0e3      	beq.n	800ab04 <_malloc_r+0x64>
 800ab3c:	1a21      	subs	r1, r4, r0
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f000 faf6 	bl	800b130 <_sbrk_r>
 800ab44:	3001      	adds	r0, #1
 800ab46:	d1dd      	bne.n	800ab04 <_malloc_r+0x64>
 800ab48:	e7cf      	b.n	800aaea <_malloc_r+0x4a>
 800ab4a:	bf00      	nop
 800ab4c:	200000a0 	.word	0x200000a0
 800ab50:	200000a4 	.word	0x200000a4

0800ab54 <__sfputc_r>:
 800ab54:	6893      	ldr	r3, [r2, #8]
 800ab56:	b410      	push	{r4}
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	6093      	str	r3, [r2, #8]
 800ab5e:	da07      	bge.n	800ab70 <__sfputc_r+0x1c>
 800ab60:	6994      	ldr	r4, [r2, #24]
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	db01      	blt.n	800ab6a <__sfputc_r+0x16>
 800ab66:	290a      	cmp	r1, #10
 800ab68:	d102      	bne.n	800ab70 <__sfputc_r+0x1c>
 800ab6a:	bc10      	pop	{r4}
 800ab6c:	f7ff bc6e 	b.w	800a44c <__swbuf_r>
 800ab70:	6813      	ldr	r3, [r2, #0]
 800ab72:	1c58      	adds	r0, r3, #1
 800ab74:	6010      	str	r0, [r2, #0]
 800ab76:	7019      	strb	r1, [r3, #0]
 800ab78:	4608      	mov	r0, r1
 800ab7a:	bc10      	pop	{r4}
 800ab7c:	4770      	bx	lr

0800ab7e <__sfputs_r>:
 800ab7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab80:	4606      	mov	r6, r0
 800ab82:	460f      	mov	r7, r1
 800ab84:	4614      	mov	r4, r2
 800ab86:	18d5      	adds	r5, r2, r3
 800ab88:	42ac      	cmp	r4, r5
 800ab8a:	d101      	bne.n	800ab90 <__sfputs_r+0x12>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e007      	b.n	800aba0 <__sfputs_r+0x22>
 800ab90:	463a      	mov	r2, r7
 800ab92:	4630      	mov	r0, r6
 800ab94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab98:	f7ff ffdc 	bl	800ab54 <__sfputc_r>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d1f3      	bne.n	800ab88 <__sfputs_r+0xa>
 800aba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aba4 <_vfiprintf_r>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	460d      	mov	r5, r1
 800abaa:	4614      	mov	r4, r2
 800abac:	4698      	mov	r8, r3
 800abae:	4606      	mov	r6, r0
 800abb0:	b09d      	sub	sp, #116	; 0x74
 800abb2:	b118      	cbz	r0, 800abbc <_vfiprintf_r+0x18>
 800abb4:	6983      	ldr	r3, [r0, #24]
 800abb6:	b90b      	cbnz	r3, 800abbc <_vfiprintf_r+0x18>
 800abb8:	f7ff fe22 	bl	800a800 <__sinit>
 800abbc:	4b89      	ldr	r3, [pc, #548]	; (800ade4 <_vfiprintf_r+0x240>)
 800abbe:	429d      	cmp	r5, r3
 800abc0:	d11b      	bne.n	800abfa <_vfiprintf_r+0x56>
 800abc2:	6875      	ldr	r5, [r6, #4]
 800abc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x32>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x32>
 800abd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abd2:	f7ff feb3 	bl	800a93c <__retarget_lock_acquire_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	071b      	lsls	r3, r3, #28
 800abda:	d501      	bpl.n	800abe0 <_vfiprintf_r+0x3c>
 800abdc:	692b      	ldr	r3, [r5, #16]
 800abde:	b9eb      	cbnz	r3, 800ac1c <_vfiprintf_r+0x78>
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff fc84 	bl	800a4f0 <__swsetup_r>
 800abe8:	b1c0      	cbz	r0, 800ac1c <_vfiprintf_r+0x78>
 800abea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abec:	07dc      	lsls	r4, r3, #31
 800abee:	d50e      	bpl.n	800ac0e <_vfiprintf_r+0x6a>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf4:	b01d      	add	sp, #116	; 0x74
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	4b7b      	ldr	r3, [pc, #492]	; (800ade8 <_vfiprintf_r+0x244>)
 800abfc:	429d      	cmp	r5, r3
 800abfe:	d101      	bne.n	800ac04 <_vfiprintf_r+0x60>
 800ac00:	68b5      	ldr	r5, [r6, #8]
 800ac02:	e7df      	b.n	800abc4 <_vfiprintf_r+0x20>
 800ac04:	4b79      	ldr	r3, [pc, #484]	; (800adec <_vfiprintf_r+0x248>)
 800ac06:	429d      	cmp	r5, r3
 800ac08:	bf08      	it	eq
 800ac0a:	68f5      	ldreq	r5, [r6, #12]
 800ac0c:	e7da      	b.n	800abc4 <_vfiprintf_r+0x20>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	0598      	lsls	r0, r3, #22
 800ac12:	d4ed      	bmi.n	800abf0 <_vfiprintf_r+0x4c>
 800ac14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac16:	f7ff fe92 	bl	800a93e <__retarget_lock_release_recursive>
 800ac1a:	e7e9      	b.n	800abf0 <_vfiprintf_r+0x4c>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac20:	2320      	movs	r3, #32
 800ac22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac26:	2330      	movs	r3, #48	; 0x30
 800ac28:	f04f 0901 	mov.w	r9, #1
 800ac2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800adf0 <_vfiprintf_r+0x24c>
 800ac34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac38:	4623      	mov	r3, r4
 800ac3a:	469a      	mov	sl, r3
 800ac3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac40:	b10a      	cbz	r2, 800ac46 <_vfiprintf_r+0xa2>
 800ac42:	2a25      	cmp	r2, #37	; 0x25
 800ac44:	d1f9      	bne.n	800ac3a <_vfiprintf_r+0x96>
 800ac46:	ebba 0b04 	subs.w	fp, sl, r4
 800ac4a:	d00b      	beq.n	800ac64 <_vfiprintf_r+0xc0>
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	4622      	mov	r2, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ff93 	bl	800ab7e <__sfputs_r>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	f000 80aa 	beq.w	800adb2 <_vfiprintf_r+0x20e>
 800ac5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac60:	445a      	add	r2, fp
 800ac62:	9209      	str	r2, [sp, #36]	; 0x24
 800ac64:	f89a 3000 	ldrb.w	r3, [sl]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 80a2 	beq.w	800adb2 <_vfiprintf_r+0x20e>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac78:	f10a 0a01 	add.w	sl, sl, #1
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	9307      	str	r3, [sp, #28]
 800ac80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac84:	931a      	str	r3, [sp, #104]	; 0x68
 800ac86:	4654      	mov	r4, sl
 800ac88:	2205      	movs	r2, #5
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	4858      	ldr	r0, [pc, #352]	; (800adf0 <_vfiprintf_r+0x24c>)
 800ac90:	f000 faf8 	bl	800b284 <memchr>
 800ac94:	9a04      	ldr	r2, [sp, #16]
 800ac96:	b9d8      	cbnz	r0, 800acd0 <_vfiprintf_r+0x12c>
 800ac98:	06d1      	lsls	r1, r2, #27
 800ac9a:	bf44      	itt	mi
 800ac9c:	2320      	movmi	r3, #32
 800ac9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca2:	0713      	lsls	r3, r2, #28
 800aca4:	bf44      	itt	mi
 800aca6:	232b      	movmi	r3, #43	; 0x2b
 800aca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acac:	f89a 3000 	ldrb.w	r3, [sl]
 800acb0:	2b2a      	cmp	r3, #42	; 0x2a
 800acb2:	d015      	beq.n	800ace0 <_vfiprintf_r+0x13c>
 800acb4:	4654      	mov	r4, sl
 800acb6:	2000      	movs	r0, #0
 800acb8:	f04f 0c0a 	mov.w	ip, #10
 800acbc:	9a07      	ldr	r2, [sp, #28]
 800acbe:	4621      	mov	r1, r4
 800acc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc4:	3b30      	subs	r3, #48	; 0x30
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d94e      	bls.n	800ad68 <_vfiprintf_r+0x1c4>
 800acca:	b1b0      	cbz	r0, 800acfa <_vfiprintf_r+0x156>
 800accc:	9207      	str	r2, [sp, #28]
 800acce:	e014      	b.n	800acfa <_vfiprintf_r+0x156>
 800acd0:	eba0 0308 	sub.w	r3, r0, r8
 800acd4:	fa09 f303 	lsl.w	r3, r9, r3
 800acd8:	4313      	orrs	r3, r2
 800acda:	46a2      	mov	sl, r4
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	e7d2      	b.n	800ac86 <_vfiprintf_r+0xe2>
 800ace0:	9b03      	ldr	r3, [sp, #12]
 800ace2:	1d19      	adds	r1, r3, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	9103      	str	r1, [sp, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbb      	ittet	lt
 800acec:	425b      	neglt	r3, r3
 800acee:	f042 0202 	orrlt.w	r2, r2, #2
 800acf2:	9307      	strge	r3, [sp, #28]
 800acf4:	9307      	strlt	r3, [sp, #28]
 800acf6:	bfb8      	it	lt
 800acf8:	9204      	strlt	r2, [sp, #16]
 800acfa:	7823      	ldrb	r3, [r4, #0]
 800acfc:	2b2e      	cmp	r3, #46	; 0x2e
 800acfe:	d10c      	bne.n	800ad1a <_vfiprintf_r+0x176>
 800ad00:	7863      	ldrb	r3, [r4, #1]
 800ad02:	2b2a      	cmp	r3, #42	; 0x2a
 800ad04:	d135      	bne.n	800ad72 <_vfiprintf_r+0x1ce>
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	3402      	adds	r4, #2
 800ad0a:	1d1a      	adds	r2, r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	9203      	str	r2, [sp, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfb8      	it	lt
 800ad14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad18:	9305      	str	r3, [sp, #20]
 800ad1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae00 <_vfiprintf_r+0x25c>
 800ad1e:	2203      	movs	r2, #3
 800ad20:	4650      	mov	r0, sl
 800ad22:	7821      	ldrb	r1, [r4, #0]
 800ad24:	f000 faae 	bl	800b284 <memchr>
 800ad28:	b140      	cbz	r0, 800ad3c <_vfiprintf_r+0x198>
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	eba0 000a 	sub.w	r0, r0, sl
 800ad30:	fa03 f000 	lsl.w	r0, r3, r0
 800ad34:	9b04      	ldr	r3, [sp, #16]
 800ad36:	3401      	adds	r4, #1
 800ad38:	4303      	orrs	r3, r0
 800ad3a:	9304      	str	r3, [sp, #16]
 800ad3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad40:	2206      	movs	r2, #6
 800ad42:	482c      	ldr	r0, [pc, #176]	; (800adf4 <_vfiprintf_r+0x250>)
 800ad44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad48:	f000 fa9c 	bl	800b284 <memchr>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d03f      	beq.n	800add0 <_vfiprintf_r+0x22c>
 800ad50:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <_vfiprintf_r+0x254>)
 800ad52:	bb1b      	cbnz	r3, 800ad9c <_vfiprintf_r+0x1f8>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	3307      	adds	r3, #7
 800ad58:	f023 0307 	bic.w	r3, r3, #7
 800ad5c:	3308      	adds	r3, #8
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad62:	443b      	add	r3, r7
 800ad64:	9309      	str	r3, [sp, #36]	; 0x24
 800ad66:	e767      	b.n	800ac38 <_vfiprintf_r+0x94>
 800ad68:	460c      	mov	r4, r1
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad70:	e7a5      	b.n	800acbe <_vfiprintf_r+0x11a>
 800ad72:	2300      	movs	r3, #0
 800ad74:	f04f 0c0a 	mov.w	ip, #10
 800ad78:	4619      	mov	r1, r3
 800ad7a:	3401      	adds	r4, #1
 800ad7c:	9305      	str	r3, [sp, #20]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad84:	3a30      	subs	r2, #48	; 0x30
 800ad86:	2a09      	cmp	r2, #9
 800ad88:	d903      	bls.n	800ad92 <_vfiprintf_r+0x1ee>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0c5      	beq.n	800ad1a <_vfiprintf_r+0x176>
 800ad8e:	9105      	str	r1, [sp, #20]
 800ad90:	e7c3      	b.n	800ad1a <_vfiprintf_r+0x176>
 800ad92:	4604      	mov	r4, r0
 800ad94:	2301      	movs	r3, #1
 800ad96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad9a:	e7f0      	b.n	800ad7e <_vfiprintf_r+0x1da>
 800ad9c:	ab03      	add	r3, sp, #12
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	462a      	mov	r2, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	4b15      	ldr	r3, [pc, #84]	; (800adfc <_vfiprintf_r+0x258>)
 800ada6:	a904      	add	r1, sp, #16
 800ada8:	f3af 8000 	nop.w
 800adac:	4607      	mov	r7, r0
 800adae:	1c78      	adds	r0, r7, #1
 800adb0:	d1d6      	bne.n	800ad60 <_vfiprintf_r+0x1bc>
 800adb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adb4:	07d9      	lsls	r1, r3, #31
 800adb6:	d405      	bmi.n	800adc4 <_vfiprintf_r+0x220>
 800adb8:	89ab      	ldrh	r3, [r5, #12]
 800adba:	059a      	lsls	r2, r3, #22
 800adbc:	d402      	bmi.n	800adc4 <_vfiprintf_r+0x220>
 800adbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adc0:	f7ff fdbd 	bl	800a93e <__retarget_lock_release_recursive>
 800adc4:	89ab      	ldrh	r3, [r5, #12]
 800adc6:	065b      	lsls	r3, r3, #25
 800adc8:	f53f af12 	bmi.w	800abf0 <_vfiprintf_r+0x4c>
 800adcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adce:	e711      	b.n	800abf4 <_vfiprintf_r+0x50>
 800add0:	ab03      	add	r3, sp, #12
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	462a      	mov	r2, r5
 800add6:	4630      	mov	r0, r6
 800add8:	4b08      	ldr	r3, [pc, #32]	; (800adfc <_vfiprintf_r+0x258>)
 800adda:	a904      	add	r1, sp, #16
 800addc:	f000 f882 	bl	800aee4 <_printf_i>
 800ade0:	e7e4      	b.n	800adac <_vfiprintf_r+0x208>
 800ade2:	bf00      	nop
 800ade4:	0800b4f0 	.word	0x0800b4f0
 800ade8:	0800b510 	.word	0x0800b510
 800adec:	0800b4d0 	.word	0x0800b4d0
 800adf0:	0800b530 	.word	0x0800b530
 800adf4:	0800b53a 	.word	0x0800b53a
 800adf8:	00000000 	.word	0x00000000
 800adfc:	0800ab7f 	.word	0x0800ab7f
 800ae00:	0800b536 	.word	0x0800b536

0800ae04 <_printf_common>:
 800ae04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	4616      	mov	r6, r2
 800ae0a:	4699      	mov	r9, r3
 800ae0c:	688a      	ldr	r2, [r1, #8]
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	4607      	mov	r7, r0
 800ae12:	4293      	cmp	r3, r2
 800ae14:	bfb8      	it	lt
 800ae16:	4613      	movlt	r3, r2
 800ae18:	6033      	str	r3, [r6, #0]
 800ae1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae1e:	460c      	mov	r4, r1
 800ae20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae24:	b10a      	cbz	r2, 800ae2a <_printf_common+0x26>
 800ae26:	3301      	adds	r3, #1
 800ae28:	6033      	str	r3, [r6, #0]
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	0699      	lsls	r1, r3, #26
 800ae2e:	bf42      	ittt	mi
 800ae30:	6833      	ldrmi	r3, [r6, #0]
 800ae32:	3302      	addmi	r3, #2
 800ae34:	6033      	strmi	r3, [r6, #0]
 800ae36:	6825      	ldr	r5, [r4, #0]
 800ae38:	f015 0506 	ands.w	r5, r5, #6
 800ae3c:	d106      	bne.n	800ae4c <_printf_common+0x48>
 800ae3e:	f104 0a19 	add.w	sl, r4, #25
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	6832      	ldr	r2, [r6, #0]
 800ae46:	1a9b      	subs	r3, r3, r2
 800ae48:	42ab      	cmp	r3, r5
 800ae4a:	dc28      	bgt.n	800ae9e <_printf_common+0x9a>
 800ae4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae50:	1e13      	subs	r3, r2, #0
 800ae52:	6822      	ldr	r2, [r4, #0]
 800ae54:	bf18      	it	ne
 800ae56:	2301      	movne	r3, #1
 800ae58:	0692      	lsls	r2, r2, #26
 800ae5a:	d42d      	bmi.n	800aeb8 <_printf_common+0xb4>
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae64:	47c0      	blx	r8
 800ae66:	3001      	adds	r0, #1
 800ae68:	d020      	beq.n	800aeac <_printf_common+0xa8>
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	68e5      	ldr	r5, [r4, #12]
 800ae6e:	f003 0306 	and.w	r3, r3, #6
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	bf18      	it	ne
 800ae76:	2500      	movne	r5, #0
 800ae78:	6832      	ldr	r2, [r6, #0]
 800ae7a:	f04f 0600 	mov.w	r6, #0
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	bf08      	it	eq
 800ae82:	1aad      	subeq	r5, r5, r2
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	bf08      	it	eq
 800ae88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	bfc4      	itt	gt
 800ae90:	1a9b      	subgt	r3, r3, r2
 800ae92:	18ed      	addgt	r5, r5, r3
 800ae94:	341a      	adds	r4, #26
 800ae96:	42b5      	cmp	r5, r6
 800ae98:	d11a      	bne.n	800aed0 <_printf_common+0xcc>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e008      	b.n	800aeb0 <_printf_common+0xac>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4652      	mov	r2, sl
 800aea2:	4649      	mov	r1, r9
 800aea4:	4638      	mov	r0, r7
 800aea6:	47c0      	blx	r8
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d103      	bne.n	800aeb4 <_printf_common+0xb0>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	e7c4      	b.n	800ae42 <_printf_common+0x3e>
 800aeb8:	2030      	movs	r0, #48	; 0x30
 800aeba:	18e1      	adds	r1, r4, r3
 800aebc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aec6:	4422      	add	r2, r4
 800aec8:	3302      	adds	r3, #2
 800aeca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aece:	e7c5      	b.n	800ae5c <_printf_common+0x58>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4622      	mov	r2, r4
 800aed4:	4649      	mov	r1, r9
 800aed6:	4638      	mov	r0, r7
 800aed8:	47c0      	blx	r8
 800aeda:	3001      	adds	r0, #1
 800aedc:	d0e6      	beq.n	800aeac <_printf_common+0xa8>
 800aede:	3601      	adds	r6, #1
 800aee0:	e7d9      	b.n	800ae96 <_printf_common+0x92>
	...

0800aee4 <_printf_i>:
 800aee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	7e27      	ldrb	r7, [r4, #24]
 800aeec:	4691      	mov	r9, r2
 800aeee:	2f78      	cmp	r7, #120	; 0x78
 800aef0:	4680      	mov	r8, r0
 800aef2:	469a      	mov	sl, r3
 800aef4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aefa:	d807      	bhi.n	800af0c <_printf_i+0x28>
 800aefc:	2f62      	cmp	r7, #98	; 0x62
 800aefe:	d80a      	bhi.n	800af16 <_printf_i+0x32>
 800af00:	2f00      	cmp	r7, #0
 800af02:	f000 80d9 	beq.w	800b0b8 <_printf_i+0x1d4>
 800af06:	2f58      	cmp	r7, #88	; 0x58
 800af08:	f000 80a4 	beq.w	800b054 <_printf_i+0x170>
 800af0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af14:	e03a      	b.n	800af8c <_printf_i+0xa8>
 800af16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af1a:	2b15      	cmp	r3, #21
 800af1c:	d8f6      	bhi.n	800af0c <_printf_i+0x28>
 800af1e:	a001      	add	r0, pc, #4	; (adr r0, 800af24 <_printf_i+0x40>)
 800af20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800af24:	0800af7d 	.word	0x0800af7d
 800af28:	0800af91 	.word	0x0800af91
 800af2c:	0800af0d 	.word	0x0800af0d
 800af30:	0800af0d 	.word	0x0800af0d
 800af34:	0800af0d 	.word	0x0800af0d
 800af38:	0800af0d 	.word	0x0800af0d
 800af3c:	0800af91 	.word	0x0800af91
 800af40:	0800af0d 	.word	0x0800af0d
 800af44:	0800af0d 	.word	0x0800af0d
 800af48:	0800af0d 	.word	0x0800af0d
 800af4c:	0800af0d 	.word	0x0800af0d
 800af50:	0800b09f 	.word	0x0800b09f
 800af54:	0800afc1 	.word	0x0800afc1
 800af58:	0800b081 	.word	0x0800b081
 800af5c:	0800af0d 	.word	0x0800af0d
 800af60:	0800af0d 	.word	0x0800af0d
 800af64:	0800b0c1 	.word	0x0800b0c1
 800af68:	0800af0d 	.word	0x0800af0d
 800af6c:	0800afc1 	.word	0x0800afc1
 800af70:	0800af0d 	.word	0x0800af0d
 800af74:	0800af0d 	.word	0x0800af0d
 800af78:	0800b089 	.word	0x0800b089
 800af7c:	680b      	ldr	r3, [r1, #0]
 800af7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800af82:	1d1a      	adds	r2, r3, #4
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	600a      	str	r2, [r1, #0]
 800af88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af8c:	2301      	movs	r3, #1
 800af8e:	e0a4      	b.n	800b0da <_printf_i+0x1f6>
 800af90:	6825      	ldr	r5, [r4, #0]
 800af92:	6808      	ldr	r0, [r1, #0]
 800af94:	062e      	lsls	r6, r5, #24
 800af96:	f100 0304 	add.w	r3, r0, #4
 800af9a:	d50a      	bpl.n	800afb2 <_printf_i+0xce>
 800af9c:	6805      	ldr	r5, [r0, #0]
 800af9e:	600b      	str	r3, [r1, #0]
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	da03      	bge.n	800afac <_printf_i+0xc8>
 800afa4:	232d      	movs	r3, #45	; 0x2d
 800afa6:	426d      	negs	r5, r5
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afac:	230a      	movs	r3, #10
 800afae:	485e      	ldr	r0, [pc, #376]	; (800b128 <_printf_i+0x244>)
 800afb0:	e019      	b.n	800afe6 <_printf_i+0x102>
 800afb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800afb6:	6805      	ldr	r5, [r0, #0]
 800afb8:	600b      	str	r3, [r1, #0]
 800afba:	bf18      	it	ne
 800afbc:	b22d      	sxthne	r5, r5
 800afbe:	e7ef      	b.n	800afa0 <_printf_i+0xbc>
 800afc0:	680b      	ldr	r3, [r1, #0]
 800afc2:	6825      	ldr	r5, [r4, #0]
 800afc4:	1d18      	adds	r0, r3, #4
 800afc6:	6008      	str	r0, [r1, #0]
 800afc8:	0628      	lsls	r0, r5, #24
 800afca:	d501      	bpl.n	800afd0 <_printf_i+0xec>
 800afcc:	681d      	ldr	r5, [r3, #0]
 800afce:	e002      	b.n	800afd6 <_printf_i+0xf2>
 800afd0:	0669      	lsls	r1, r5, #25
 800afd2:	d5fb      	bpl.n	800afcc <_printf_i+0xe8>
 800afd4:	881d      	ldrh	r5, [r3, #0]
 800afd6:	2f6f      	cmp	r7, #111	; 0x6f
 800afd8:	bf0c      	ite	eq
 800afda:	2308      	moveq	r3, #8
 800afdc:	230a      	movne	r3, #10
 800afde:	4852      	ldr	r0, [pc, #328]	; (800b128 <_printf_i+0x244>)
 800afe0:	2100      	movs	r1, #0
 800afe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afe6:	6866      	ldr	r6, [r4, #4]
 800afe8:	2e00      	cmp	r6, #0
 800afea:	bfa8      	it	ge
 800afec:	6821      	ldrge	r1, [r4, #0]
 800afee:	60a6      	str	r6, [r4, #8]
 800aff0:	bfa4      	itt	ge
 800aff2:	f021 0104 	bicge.w	r1, r1, #4
 800aff6:	6021      	strge	r1, [r4, #0]
 800aff8:	b90d      	cbnz	r5, 800affe <_printf_i+0x11a>
 800affa:	2e00      	cmp	r6, #0
 800affc:	d04d      	beq.n	800b09a <_printf_i+0x1b6>
 800affe:	4616      	mov	r6, r2
 800b000:	fbb5 f1f3 	udiv	r1, r5, r3
 800b004:	fb03 5711 	mls	r7, r3, r1, r5
 800b008:	5dc7      	ldrb	r7, [r0, r7]
 800b00a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b00e:	462f      	mov	r7, r5
 800b010:	42bb      	cmp	r3, r7
 800b012:	460d      	mov	r5, r1
 800b014:	d9f4      	bls.n	800b000 <_printf_i+0x11c>
 800b016:	2b08      	cmp	r3, #8
 800b018:	d10b      	bne.n	800b032 <_printf_i+0x14e>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	07df      	lsls	r7, r3, #31
 800b01e:	d508      	bpl.n	800b032 <_printf_i+0x14e>
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	6861      	ldr	r1, [r4, #4]
 800b024:	4299      	cmp	r1, r3
 800b026:	bfde      	ittt	le
 800b028:	2330      	movle	r3, #48	; 0x30
 800b02a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b02e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b032:	1b92      	subs	r2, r2, r6
 800b034:	6122      	str	r2, [r4, #16]
 800b036:	464b      	mov	r3, r9
 800b038:	4621      	mov	r1, r4
 800b03a:	4640      	mov	r0, r8
 800b03c:	f8cd a000 	str.w	sl, [sp]
 800b040:	aa03      	add	r2, sp, #12
 800b042:	f7ff fedf 	bl	800ae04 <_printf_common>
 800b046:	3001      	adds	r0, #1
 800b048:	d14c      	bne.n	800b0e4 <_printf_i+0x200>
 800b04a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04e:	b004      	add	sp, #16
 800b050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b054:	4834      	ldr	r0, [pc, #208]	; (800b128 <_printf_i+0x244>)
 800b056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b05a:	680e      	ldr	r6, [r1, #0]
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b062:	061f      	lsls	r7, r3, #24
 800b064:	600e      	str	r6, [r1, #0]
 800b066:	d514      	bpl.n	800b092 <_printf_i+0x1ae>
 800b068:	07d9      	lsls	r1, r3, #31
 800b06a:	bf44      	itt	mi
 800b06c:	f043 0320 	orrmi.w	r3, r3, #32
 800b070:	6023      	strmi	r3, [r4, #0]
 800b072:	b91d      	cbnz	r5, 800b07c <_printf_i+0x198>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	f023 0320 	bic.w	r3, r3, #32
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	2310      	movs	r3, #16
 800b07e:	e7af      	b.n	800afe0 <_printf_i+0xfc>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	f043 0320 	orr.w	r3, r3, #32
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	2378      	movs	r3, #120	; 0x78
 800b08a:	4828      	ldr	r0, [pc, #160]	; (800b12c <_printf_i+0x248>)
 800b08c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b090:	e7e3      	b.n	800b05a <_printf_i+0x176>
 800b092:	065e      	lsls	r6, r3, #25
 800b094:	bf48      	it	mi
 800b096:	b2ad      	uxthmi	r5, r5
 800b098:	e7e6      	b.n	800b068 <_printf_i+0x184>
 800b09a:	4616      	mov	r6, r2
 800b09c:	e7bb      	b.n	800b016 <_printf_i+0x132>
 800b09e:	680b      	ldr	r3, [r1, #0]
 800b0a0:	6826      	ldr	r6, [r4, #0]
 800b0a2:	1d1d      	adds	r5, r3, #4
 800b0a4:	6960      	ldr	r0, [r4, #20]
 800b0a6:	600d      	str	r5, [r1, #0]
 800b0a8:	0635      	lsls	r5, r6, #24
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	d501      	bpl.n	800b0b2 <_printf_i+0x1ce>
 800b0ae:	6018      	str	r0, [r3, #0]
 800b0b0:	e002      	b.n	800b0b8 <_printf_i+0x1d4>
 800b0b2:	0671      	lsls	r1, r6, #25
 800b0b4:	d5fb      	bpl.n	800b0ae <_printf_i+0x1ca>
 800b0b6:	8018      	strh	r0, [r3, #0]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4616      	mov	r6, r2
 800b0bc:	6123      	str	r3, [r4, #16]
 800b0be:	e7ba      	b.n	800b036 <_printf_i+0x152>
 800b0c0:	680b      	ldr	r3, [r1, #0]
 800b0c2:	1d1a      	adds	r2, r3, #4
 800b0c4:	600a      	str	r2, [r1, #0]
 800b0c6:	681e      	ldr	r6, [r3, #0]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	6862      	ldr	r2, [r4, #4]
 800b0ce:	f000 f8d9 	bl	800b284 <memchr>
 800b0d2:	b108      	cbz	r0, 800b0d8 <_printf_i+0x1f4>
 800b0d4:	1b80      	subs	r0, r0, r6
 800b0d6:	6060      	str	r0, [r4, #4]
 800b0d8:	6863      	ldr	r3, [r4, #4]
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e2:	e7a8      	b.n	800b036 <_printf_i+0x152>
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	47d0      	blx	sl
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d0ab      	beq.n	800b04a <_printf_i+0x166>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	079b      	lsls	r3, r3, #30
 800b0f6:	d413      	bmi.n	800b120 <_printf_i+0x23c>
 800b0f8:	68e0      	ldr	r0, [r4, #12]
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	4298      	cmp	r0, r3
 800b0fe:	bfb8      	it	lt
 800b100:	4618      	movlt	r0, r3
 800b102:	e7a4      	b.n	800b04e <_printf_i+0x16a>
 800b104:	2301      	movs	r3, #1
 800b106:	4632      	mov	r2, r6
 800b108:	4649      	mov	r1, r9
 800b10a:	4640      	mov	r0, r8
 800b10c:	47d0      	blx	sl
 800b10e:	3001      	adds	r0, #1
 800b110:	d09b      	beq.n	800b04a <_printf_i+0x166>
 800b112:	3501      	adds	r5, #1
 800b114:	68e3      	ldr	r3, [r4, #12]
 800b116:	9903      	ldr	r1, [sp, #12]
 800b118:	1a5b      	subs	r3, r3, r1
 800b11a:	42ab      	cmp	r3, r5
 800b11c:	dcf2      	bgt.n	800b104 <_printf_i+0x220>
 800b11e:	e7eb      	b.n	800b0f8 <_printf_i+0x214>
 800b120:	2500      	movs	r5, #0
 800b122:	f104 0619 	add.w	r6, r4, #25
 800b126:	e7f5      	b.n	800b114 <_printf_i+0x230>
 800b128:	0800b541 	.word	0x0800b541
 800b12c:	0800b552 	.word	0x0800b552

0800b130 <_sbrk_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	2300      	movs	r3, #0
 800b134:	4d05      	ldr	r5, [pc, #20]	; (800b14c <_sbrk_r+0x1c>)
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	f7fb fc78 	bl	8006a30 <_sbrk>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_sbrk_r+0x1a>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_sbrk_r+0x1a>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	200001ec 	.word	0x200001ec

0800b150 <__sread>:
 800b150:	b510      	push	{r4, lr}
 800b152:	460c      	mov	r4, r1
 800b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b158:	f000 f8ae 	bl	800b2b8 <_read_r>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	bfab      	itete	ge
 800b160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b162:	89a3      	ldrhlt	r3, [r4, #12]
 800b164:	181b      	addge	r3, r3, r0
 800b166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b16a:	bfac      	ite	ge
 800b16c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b16e:	81a3      	strhlt	r3, [r4, #12]
 800b170:	bd10      	pop	{r4, pc}

0800b172 <__swrite>:
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	461f      	mov	r7, r3
 800b178:	898b      	ldrh	r3, [r1, #12]
 800b17a:	4605      	mov	r5, r0
 800b17c:	05db      	lsls	r3, r3, #23
 800b17e:	460c      	mov	r4, r1
 800b180:	4616      	mov	r6, r2
 800b182:	d505      	bpl.n	800b190 <__swrite+0x1e>
 800b184:	2302      	movs	r3, #2
 800b186:	2200      	movs	r2, #0
 800b188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b18c:	f000 f868 	bl	800b260 <_lseek_r>
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	4632      	mov	r2, r6
 800b194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	4628      	mov	r0, r5
 800b19c:	463b      	mov	r3, r7
 800b19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	f000 b817 	b.w	800b1d8 <_write_r>

0800b1aa <__sseek>:
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b2:	f000 f855 	bl	800b260 <_lseek_r>
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	bf15      	itete	ne
 800b1bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1c6:	81a3      	strheq	r3, [r4, #12]
 800b1c8:	bf18      	it	ne
 800b1ca:	81a3      	strhne	r3, [r4, #12]
 800b1cc:	bd10      	pop	{r4, pc}

0800b1ce <__sclose>:
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	f000 b813 	b.w	800b1fc <_close_r>
	...

0800b1d8 <_write_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4d05      	ldr	r5, [pc, #20]	; (800b1f8 <_write_r+0x20>)
 800b1e4:	602a      	str	r2, [r5, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f7fb fa5a 	bl	80066a0 <_write>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_write_r+0x1e>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_write_r+0x1e>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	200001ec 	.word	0x200001ec

0800b1fc <_close_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	2300      	movs	r3, #0
 800b200:	4d05      	ldr	r5, [pc, #20]	; (800b218 <_close_r+0x1c>)
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	602b      	str	r3, [r5, #0]
 800b208:	f7fb fbe1 	bl	80069ce <_close>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_close_r+0x1a>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_close_r+0x1a>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	200001ec 	.word	0x200001ec

0800b21c <_fstat_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	2300      	movs	r3, #0
 800b220:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_fstat_r+0x20>)
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	4611      	mov	r1, r2
 800b228:	602b      	str	r3, [r5, #0]
 800b22a:	f7fb fbdb 	bl	80069e4 <_fstat>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d102      	bne.n	800b238 <_fstat_r+0x1c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	b103      	cbz	r3, 800b238 <_fstat_r+0x1c>
 800b236:	6023      	str	r3, [r4, #0]
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	bf00      	nop
 800b23c:	200001ec 	.word	0x200001ec

0800b240 <_isatty_r>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	2300      	movs	r3, #0
 800b244:	4d05      	ldr	r5, [pc, #20]	; (800b25c <_isatty_r+0x1c>)
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f7fb fbd9 	bl	8006a02 <_isatty>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_isatty_r+0x1a>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_isatty_r+0x1a>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	200001ec 	.word	0x200001ec

0800b260 <_lseek_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	4608      	mov	r0, r1
 800b266:	4611      	mov	r1, r2
 800b268:	2200      	movs	r2, #0
 800b26a:	4d05      	ldr	r5, [pc, #20]	; (800b280 <_lseek_r+0x20>)
 800b26c:	602a      	str	r2, [r5, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	f7fb fbd1 	bl	8006a16 <_lseek>
 800b274:	1c43      	adds	r3, r0, #1
 800b276:	d102      	bne.n	800b27e <_lseek_r+0x1e>
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	b103      	cbz	r3, 800b27e <_lseek_r+0x1e>
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	200001ec 	.word	0x200001ec

0800b284 <memchr>:
 800b284:	4603      	mov	r3, r0
 800b286:	b510      	push	{r4, lr}
 800b288:	b2c9      	uxtb	r1, r1
 800b28a:	4402      	add	r2, r0
 800b28c:	4293      	cmp	r3, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	d101      	bne.n	800b296 <memchr+0x12>
 800b292:	2000      	movs	r0, #0
 800b294:	e003      	b.n	800b29e <memchr+0x1a>
 800b296:	7804      	ldrb	r4, [r0, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	428c      	cmp	r4, r1
 800b29c:	d1f6      	bne.n	800b28c <memchr+0x8>
 800b29e:	bd10      	pop	{r4, pc}

0800b2a0 <__malloc_lock>:
 800b2a0:	4801      	ldr	r0, [pc, #4]	; (800b2a8 <__malloc_lock+0x8>)
 800b2a2:	f7ff bb4b 	b.w	800a93c <__retarget_lock_acquire_recursive>
 800b2a6:	bf00      	nop
 800b2a8:	200001e4 	.word	0x200001e4

0800b2ac <__malloc_unlock>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	; (800b2b4 <__malloc_unlock+0x8>)
 800b2ae:	f7ff bb46 	b.w	800a93e <__retarget_lock_release_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	200001e4 	.word	0x200001e4

0800b2b8 <_read_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	4d05      	ldr	r5, [pc, #20]	; (800b2d8 <_read_r+0x20>)
 800b2c4:	602a      	str	r2, [r5, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	f7fb fb64 	bl	8006994 <_read>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d102      	bne.n	800b2d6 <_read_r+0x1e>
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	b103      	cbz	r3, 800b2d6 <_read_r+0x1e>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	200001ec 	.word	0x200001ec

0800b2dc <_init>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	bf00      	nop
 800b2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e2:	bc08      	pop	{r3}
 800b2e4:	469e      	mov	lr, r3
 800b2e6:	4770      	bx	lr

0800b2e8 <_fini>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	bf00      	nop
 800b2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ee:	bc08      	pop	{r3}
 800b2f0:	469e      	mov	lr, r3
 800b2f2:	4770      	bx	lr
